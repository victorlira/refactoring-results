[
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2609
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2604
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2633
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2618
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2633
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l13 = lengthof l8",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2633
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 252
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 252
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
					"line": 252
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack11 = new java.lang.StringBuffer,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored#34 = $stack11,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored#34 = $stack11, 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack13 = virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.String toString()>(),259,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status),365,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status),365,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 365
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 252
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 254
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 256
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 256
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 259
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 365
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 365
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(color),288,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(color), 288)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(color),288,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(color), 288))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 286
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 285
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 288
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 286
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 285
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 288
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(color)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
					"line": 288
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = neg l0,440,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l0 = neg l0, 440)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 440
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 445
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 445
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l3 = l0 / 100",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: void getChars(int,int,char[])>",
					"line": 445
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>,$stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-"),112,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269) => (<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('-'), 112)) => Node(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>,$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status),112,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269) => (<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status), 112)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>,$stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-"),112,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269) => (<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>, $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('-'), 112))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserUtils",
	"method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserUtils",
	"method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
	"line": 112
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserUtils",
	"method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserUtils",
	"method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
	"line": 112
},{
	"class": "hudson.plugins.logparser.LogParserUtils",
	"method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
	"line": 112
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(status)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserUtils",
					"method": "<hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>",
					"line": 112
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</a>"),309,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</a>'), 309)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</a>"),309,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</a>'), 309))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 309
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 309
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</a>')",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 309
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack28 = l13 - l11,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack28 = l13 - l11, 2642)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack39 = l12 + l5,2636,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack39 = l12 + l5, 2636)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack39 = l12 + l5,2636,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack39 = l12 + l5, 2636))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2609
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2604
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2636
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2618
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2633
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2642
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2642
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2636
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack39 = l12 + l5",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2636
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l2 = newarray (char)[l1],401,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l2 = newarray (char)[l1], 401)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l2 = newarray (char)[l1],401,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l2 = newarray (char)[l1], 401))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 401
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 401
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l2 = newarray (char)[l1]",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: java.lang.String toString(int)>",
					"line": 401
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2572
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2572
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack16 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2572
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,link = $stack24,311,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack30 = virtualinvoke link.<java.lang.StringBuffer: java.lang.String toString()>(),318,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack30 = virtualinvoke link.<java.lang.StringBuffer: java.lang.String toString()>(), 318)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke linkWriter.<java.io.BufferedWriter: void write(java.lang.String)>($stack30),318,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke linkWriter.<java.io.BufferedWriter: void write(java.lang.String)>($stack30), 318)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,link = $stack24,311,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack30 = virtualinvoke link.<java.lang.StringBuffer: java.lang.String toString()>(),318,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack30 = virtualinvoke link.<java.lang.StringBuffer: java.lang.String toString()>(), 318))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 311
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 318
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 311
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 318
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 318
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke linkWriter.<java.io.BufferedWriter: void write(java.lang.String)>($stack30)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 318
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" style=\"color: "),287,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\' style=\'color: '), 287)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" style=\"color: "),287,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\' style=\'color: '), 287))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 286
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 285
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 287
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 286
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 285
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 287
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\' style=\'color: ')",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
					"line": 287
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2590
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2590
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l4#4 = newarray (char)[l3]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2590
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + 1,2584,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + 1,2584,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2575
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2579
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2579
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2584
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2575
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2579
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2579
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2584
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l2 = l2 + 1",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2584
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line),308,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line), 308)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line),308,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line), 308))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 308
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 308
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 308
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack32 = l8[l14#27],2640,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack32 = l8[l14#27], 2640)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack31 = l12 + l5,2640,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack31 = l12 + l5, 2640)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack33 = $stack31 + l14#27,2640,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack33 = $stack31 + l14#27, 2640))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2609
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2604
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2642
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2640
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2640
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2618
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2640
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack32 = l8[l14#27]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2640
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack62 = (char) l10,2616,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack62 = (char) l10, 2616)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack62 = (char) l10,2616,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack62 = (char) l10, 2616))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack62 = (char) l10",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2616
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2575
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2579
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2579
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2604
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2575
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2579
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2579
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2604
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l12 = l2",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2604
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack16 = virtualinvoke result.<java.lang.StringBuffer: java.lang.String toString()>(),292,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack16 = virtualinvoke result.<java.lang.StringBuffer: java.lang.String toString()>(),292,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 286
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 285
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 292
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 286
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 285
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 292
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack16 = virtualinvoke result.<java.lang.StringBuffer: java.lang.String toString()>()",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
					"line": 292
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2575
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2579
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2579
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2575
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2579
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2579
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l2 = newarray (char)[l1],401,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l2 = newarray (char)[l1], 401)) => Node(<java.lang.String: void <init>(char[],boolean)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack4 = new java.lang.String,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.String: void <init>(char[],boolean)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403)) => Node(<java.lang.String: void <init>(char[],boolean)>,l0.<java.lang.String: char[] value> = l1,611,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403) => (<java.lang.String: void <init>(char[],boolean)>, l0.<java.lang.String: char[] value> = l1, 611)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l2 = newarray (char)[l1],401,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l2 = newarray (char)[l1], 401)) => Node(<java.lang.String: void <init>(char[],boolean)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack4 = new java.lang.String,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.String: void <init>(char[],boolean)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403)) => Node(<java.lang.String: void <init>(char[],boolean)>,l0.<java.lang.String: char[] value> = l1,611,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403) => (<java.lang.String: void <init>(char[],boolean)>, l0.<java.lang.String: char[] value> = l1, 611))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 401
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],boolean)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],boolean)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],boolean)>",
	"line": 611
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 401
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],boolean)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],boolean)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],boolean)>",
	"line": 611
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.String: char[] value> = l1",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: void <init>(char[],boolean)>",
					"line": 611
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,brShortLink = $stack41,334,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, brShortLink = $stack41, 334)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack44 = virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.String toString()>(),336,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack44 = virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.String toString()>(), 336)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,brShortLink = $stack41,334,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, brShortLink = $stack41, 334)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack44 = virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.String toString()>(),336,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack44 = virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.String toString()>(), 336)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke $stack43.<java.util.ArrayList: boolean add(java.lang.Object)>($stack44),336,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke $stack43.<java.util.ArrayList: boolean add(java.lang.Object)>($stack44), 336))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 334
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 336
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 336
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 334
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 336
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack44 = virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.String toString()>()",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 336
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = neg l0,440,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l0 = neg l0, 440)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = neg l0,440,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l0 = neg l0, 440))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 440
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 440
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0 = neg l0",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: void getChars(int,int,char[])>",
					"line": 440
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l2 = newarray (char)[l1],401,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l2 = newarray (char)[l1], 401)) => Node(<java.lang.Integer: java.lang.String toString(int)>,staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2),402,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: java.lang.String toString(int)>,staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2),402,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 402
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 401
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 402
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2)",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: java.lang.String toString(int)>",
					"line": 402
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\">"),289,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'>'), 289)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\">"),289,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'>'), 289))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 286
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 285
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 289
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 286
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 285
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 289
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'>')",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
					"line": 289
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack11 = new java.lang.StringBuffer,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored#34 = $stack11,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored#34 = $stack11, 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack13 = virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.String toString()>(),259,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack11 = new java.lang.StringBuffer,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored#34 = $stack11,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored#34 = $stack11, 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack13 = virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.String toString()>(),259,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 252
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 254
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 256
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 256
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 259
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 252
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 254
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 256
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 256
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 259
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack13 = virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.String toString()>()",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
					"line": 259
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,448,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack7 = l0 * 52429,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack7 = l0 * 52429, 456)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = $stack7 >>> 19,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = $stack7 >>> 19, 456)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,459,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack7 = l0 * 52429, 456)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = neg l0,440,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l0 = neg l0, 440)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,448,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack7 = l0 * 52429,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack7 = l0 * 52429, 456)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = $stack7 >>> 19,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = $stack7 >>> 19, 456)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,459,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack7 = l0 * 52429, 456))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 440
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 445
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 448
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 456
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 456
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 459
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 445
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 448
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 456
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 456
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 459
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0 = l3",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: void getChars(int,int,char[])>",
					"line": 459
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key),271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,currentValInteger = (java.lang.Integer) $stack8,271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)) => Node(<java.lang.Integer: int intValue()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<java.lang.Integer: int intValue()>,$stack1 = l0.<java.lang.Integer: int value>,893,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key),271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,currentValInteger = (java.lang.Integer) $stack8,271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)) => Node(<java.lang.Integer: int intValue()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<java.lang.Integer: int intValue()>,$stack1 = l0.<java.lang.Integer: int value>,893,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 269
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 271
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 271
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: int intValue()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: int intValue()>",
	"line": 893
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 269
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 271
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 271
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: int intValue()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: int intValue()>",
	"line": 893
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = l0.<java.lang.Integer: int value>",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: int intValue()>",
					"line": 893
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "effectiveStatus = status",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
					"line": 228
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack29 = virtualinvoke $stack28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),317,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack29 = virtualinvoke $stack28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 317)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,linkWriter = (java.io.BufferedWriter) $stack29,317,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, linkWriter = (java.io.BufferedWriter) $stack29, 317)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke linkWriter.<java.io.BufferedWriter: void newLine()>(),319,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke linkWriter.<java.io.BufferedWriter: void newLine()>(), 319)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack29 = virtualinvoke $stack28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),317,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack29 = virtualinvoke $stack28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 317)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,linkWriter = (java.io.BufferedWriter) $stack29,317,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, linkWriter = (java.io.BufferedWriter) $stack29, 317)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke linkWriter.<java.io.BufferedWriter: void newLine()>(),319,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke linkWriter.<java.io.BufferedWriter: void newLine()>(), 319))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 317
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 317
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 319
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 317
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 317
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 319
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke linkWriter.<java.io.BufferedWriter: void newLine()>()",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 319
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack25 = (char) l10,2606,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack25 = (char) l10, 2606)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack25 = (char) l10,2606,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack25 = (char) l10, 2606))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2606
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2606
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack25 = (char) l10",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2606
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,markedLine = $stack31,322,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack36 = virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.String toString()>(),339,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,markedLine = $stack31,322,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack36 = virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.String toString()>(),339,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 322
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 339
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 322
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 339
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack36 = virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.String toString()>()",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 339
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "shortLink = $stack19",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 304
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack11 = new java.lang.StringBuffer,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored#34 = $stack11,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored#34 = $stack11, 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<br/>\n"),258,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('<br/>\n'), 258)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack11 = new java.lang.StringBuffer,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored#34 = $stack11,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored#34 = $stack11, 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<br/>\n"),258,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('<br/>\n'), 258))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 252
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 254
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 256
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 256
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 258
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 252
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 254
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 256
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 256
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 258
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('<br/>\n')",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
					"line": 258
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,markedLine = $stack31,322,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"></a></p>"),324,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'></a></p>'), 324)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,markedLine = $stack31,322,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"></a></p>"),324,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'></a></p>'), 324))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 322
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 324
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 322
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 324
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'></a></p>')",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 324
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,brShortLink = $stack41,334,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, brShortLink = $stack41, 334)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,brShortLink = $stack41,334,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, brShortLink = $stack41, 334))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 334
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 334
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "brShortLink = $stack41",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 334
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,markedLine = $stack31,322,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker),323,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker), 323)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,markedLine = $stack31,322,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker),323,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker), 323))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 322
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 323
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 322
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 323
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 323
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2609
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2604
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2624
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2609
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2604
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2624
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2624
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,status := @parameter2: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack12 = l3,987,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = l3 + -1,987,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 987
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 987
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack12 = l3",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 987
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack11 = new java.lang.StringBuffer,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack11 = new java.lang.StringBuffer,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 252
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 254
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 256
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 252
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 254
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 256
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack11 = new java.lang.StringBuffer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
					"line": 256
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 269
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 269
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
					"line": 269
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack28 = l13 - l11,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack28 = l13 - l11, 2642)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack53 = l12 + l5,2644,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack53 = l12 + l5, 2644)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack53 = l12 + l5,2644,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack53 = l12 + l5, 2644))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2609
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2604
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2642
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2644
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2618
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2633
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2642
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2642
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2644
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack53 = l12 + l5",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2644
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l2 = newarray (char)[l1],401,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l2 = newarray (char)[l1], 401)) => Node(<java.lang.String: void <init>(char[],boolean)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack4 = new java.lang.String,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 401
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],boolean)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack5 = neg l0",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: java.lang.String toString(int)>",
					"line": 403
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,458,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 458)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,449,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,450,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,458,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 458))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 435
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 449
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 450
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 458
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 435
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 458
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l5 = l5 + -1",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: void getChars(int,int,char[])>",
					"line": 458
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</span>"),291,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</span>'), 291)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</span>"),291,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</span>'), 291))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 286
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 285
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 291
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 286
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 285
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 291
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</span>')",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
					"line": 291
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack29 = virtualinvoke $stack28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),317,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack29 = virtualinvoke $stack28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 317)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack29 = virtualinvoke $stack28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),317,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack29 = virtualinvoke $stack28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 317)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,linkWriter = (java.io.BufferedWriter) $stack29,317,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, linkWriter = (java.io.BufferedWriter) $stack29, 317))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 317
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 317
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 317
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack29 = virtualinvoke $stack28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 317
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,status := @parameter2: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack8 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 982
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,status := @parameter2: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 984
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 984
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l4 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 984
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus),245,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus),245,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 245
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 245
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
					"line": 245
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,458,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 458)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,463,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 463)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,449,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,450,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,458,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 458)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,463,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 463))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 435
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 449
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 450
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 458
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 463
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 435
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 458
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 463
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l5 = l5 + -1",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: void getChars(int,int,char[])>",
					"line": 463
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>,$stack4 = virtualinvoke $stack3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(status),263,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(status), 263)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>,$stack5 = (java.lang.Integer) $stack4,263,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, $stack5 = (java.lang.Integer) $stack4, 263)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>,$stack4 = virtualinvoke $stack3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(status),263,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(status), 263)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>,$stack5 = (java.lang.Integer) $stack4,263,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, $stack5 = (java.lang.Integer) $stack4, 263))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>",
	"line": 263
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>",
	"line": 263
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>",
	"line": 263
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>",
	"line": 263
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack5 = (java.lang.Integer) $stack4",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>",
					"line": 263
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19),246,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19),246,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 246
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 246
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
					"line": 246
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack11 = new java.lang.StringBuffer,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, specialinvoke $stack11.<java.lang.StringBuffer: void <init>(java.lang.String)>(parsedLine), 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored#34 = $stack11,256,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored#34 = $stack11, 256)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack13 = virtualinvoke parsedLineColored#34.<java.lang.StringBuffer: java.lang.String toString()>(),259,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status),365,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,virtualinvoke writer.<java.io.BufferedWriter: void write(java.lang.String)>(parsedLine),367,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, virtualinvoke writer.<java.io.BufferedWriter: void write(java.lang.String)>(parsedLine), 367)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status),365,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,virtualinvoke writer.<java.io.BufferedWriter: void write(java.lang.String)>(parsedLine),367,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, virtualinvoke writer.<java.io.BufferedWriter: void write(java.lang.String)>(parsedLine), 367))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 365
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 367
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 252
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 254
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 256
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 256
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 259
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 365
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 367
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke writer.<java.io.BufferedWriter: void write(java.lang.String)>(parsedLine)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 367
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2609
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2604
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2633
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2618
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2633
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l14 = newarray (char)[$stack38]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2635
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($stack1),935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = l0.<java.lang.Integer: int value>",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: java.lang.String toString()>",
					"line": 935
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2609
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2604
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2633
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2618
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2633
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l4#4 = l14",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2637
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2608
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line),290,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line), 290)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line),290,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line), 290))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 286
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 285
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 290
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 286
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 285
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 290
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
					"line": 290
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
					"line": 248
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key),271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,currentValInteger = (java.lang.Integer) $stack8,271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)) => Node(<java.lang.Integer: int intValue()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<java.lang.Integer: int intValue()>,$stack1 = l0.<java.lang.Integer: int value>,893,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(),276,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,newVal = $stack9 + 1,276,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(newVal),277,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(newVal), 277)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key),271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,currentValInteger = (java.lang.Integer) $stack8,271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)) => Node(<java.lang.Integer: int intValue()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<java.lang.Integer: int intValue()>,$stack1 = l0.<java.lang.Integer: int value>,893,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(),276,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,newVal = $stack9 + 1,276,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(newVal),277,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(newVal), 277)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,virtualinvoke $stack10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $stack11),277,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, virtualinvoke $stack10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, $stack11), 277))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 269
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 271
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 271
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: int intValue()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: int intValue()>",
	"line": 893
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 276
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 276
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 277
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 277
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 269
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 271
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 271
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: int intValue()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: int intValue()>",
	"line": 893
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 276
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 276
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 277
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(newVal)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
					"line": 277
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack16 = virtualinvoke effectiveStatus.<java.lang.String: boolean equals(java.lang.Object)>("NONE"),243,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack16 = virtualinvoke effectiveStatus.<java.lang.String: boolean equals(java.lang.Object)>('NONE'), 243)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack16 = virtualinvoke effectiveStatus.<java.lang.String: boolean equals(java.lang.Object)>("NONE"),243,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack16 = virtualinvoke effectiveStatus.<java.lang.String: boolean equals(java.lang.Object)>('NONE'), 243))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 243
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 243
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack16 = virtualinvoke effectiveStatus.<java.lang.String: boolean equals(java.lang.Object)>('NONE')",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
					"line": 243
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack13 = (java.lang.Integer) $stack12",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 300
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,markedLine = $stack31,322,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,markedLine = $stack31,322,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 322
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 322
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "markedLine = $stack31",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 322
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = $stack3",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: java.lang.String toString(int)>",
					"line": 400
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,link = $stack24,311,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink),313,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink), 313)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink),313,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink), 313))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 313
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 311
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 313
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 313
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5),2576,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5), 2576)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5),2576,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5), 2576))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2575
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2576
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2575
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2576
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2576
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker),306,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker), 306)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker),306,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker), 306))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 306
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 306
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(marker)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 306
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>("START"),231,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,$stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>("START"),231,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 231
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 231
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START')",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
					"line": 231
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,link = $stack24,311,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</li>"),314,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</li>'), 314)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,link = $stack24,311,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</li>"),314,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</li>'), 314))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 311
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 314
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 311
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 314
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('</li>')",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 314
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2567,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2567)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2567,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2567)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l3 = lengthof $stack15,2567,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l3 = lengthof $stack15, 2567))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2567
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2567
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2567
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack15 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2567
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,449,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,449,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 435
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 449
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 435
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 449
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l5 = l5 + -1",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: void getChars(int,int,char[])>",
					"line": 449
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key),271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key),271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,currentValInteger = (java.lang.Integer) $stack8,271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 269
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 271
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 271
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 269
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 271
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
					"line": 271
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack9),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack9), 286)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack9),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack9), 286))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 286
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 286
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 286
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 285
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 286
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack9)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
					"line": 286
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,markedLine = $stack31,322,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, markedLine = $stack31, 322)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line),325,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line), 325)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line),325,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line), 325))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 325
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 322
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 325
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke markedLine.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(line)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 325
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status),252,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLine = parsedLineColoredAndMarked,254,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLine = parsedLineColoredAndMarked, 254))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 252
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 254
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 252
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 254
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "parsedLine = parsedLineColoredAndMarked",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
					"line": 254
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack28 = l13 - l11,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack28 = l13 - l11, 2642)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack23 = l3 + l5,2647,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack23 = l3 + l5, 2647)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack23 = l3 + l5,2647,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack23 = l3 + l5, 2647)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23),2647,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2609
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2604
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2642
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2647
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2647
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2618
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2633
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2642
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2642
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2647
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack23 = l3 + l5",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2647
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack28 = l13 - l11,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack28 = l13 - l11, 2642)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2609
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2604
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2642
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2618
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2633
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2642
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack28 = l13 - l11",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2642
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack15 = new java.lang.StringBuilder,301,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, specialinvoke $stack15.<java.lang.StringBuilder: void <init>()>(), 301)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack15 = new java.lang.StringBuilder,301,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, specialinvoke $stack15.<java.lang.StringBuilder: void <init>()>(), 301))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 301
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 301
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack15 = new java.lang.StringBuilder",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 301
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,brShortLink = $stack41,334,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, brShortLink = $stack41, 334)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink),335,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink), 335)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,brShortLink = $stack41,334,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, brShortLink = $stack41, 334)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink),335,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink), 335))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 334
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 335
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 334
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 335
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke brShortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>(shortLink)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 335
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,status := @parameter2: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack14 = l4[l6],988,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack14 = l4[l6], 988)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack14 = l4[l6],988,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 231) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack14 = l4[l6], 988))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 984
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 988
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 984
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 988
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack14 = l4[l6]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 988
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,link = $stack24,311,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,link = $stack24,311,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 311
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 311
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "link = $stack24",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 311
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack7 = virtualinvoke $stack6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(status),281,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(status), 281)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack7 = virtualinvoke $stack6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(status),281,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke $stack6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(status), 281))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 281
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 281
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack7 = virtualinvoke $stack6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(status)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
					"line": 281
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,448,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = neg l0,440,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l0 = neg l0, 440)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,448,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 440
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 445
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 448
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 445
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 448
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0 = l3",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: void getChars(int,int,char[])>",
					"line": 448
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 435
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 435
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l5 = l1",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: void getChars(int,int,char[])>",
					"line": 435
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2609
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2604
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2618
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2629
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack29 = l3 << 6,447,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack29 = l3 << 6, 447)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack31 = $stack29 + $stack28,447,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack31 = $stack29 + $stack28, 447)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack32 = $stack31 + $stack30,447,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack32 = $stack31 + $stack30, 447)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = neg l0,440,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l0 = neg l0, 440)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack29 = l3 << 6,447,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack29 = l3 << 6, 447))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 440
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 445
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 447
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 445
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 447
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 447
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 447
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack32 = $stack31 + $stack30",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: void getChars(int,int,char[])>",
					"line": 447
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\">"),307,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'>'), 307)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\">"),307,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'>'), 307))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 307
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 307
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke shortLink.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('\'>')",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 307
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,link = $stack24,311,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(statusCountStr),312,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(statusCountStr), 312)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus),248,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,shortLink = $stack19,304,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, shortLink = $stack19, 304)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,link = $stack24,311,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, link = $stack24, 311)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(statusCountStr),312,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(statusCountStr), 312))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 311
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 312
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 248
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 304
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 311
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 312
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke link.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(statusCountStr)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 312
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase()>",
					"line": 2670
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,448,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack7 = l0 * 52429,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack7 = l0 * 52429, 456)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = $stack7 >>> 19,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = $stack7 >>> 19, 456)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack8 = l3 << 1,457,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack8 = l3 << 1, 457)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = neg l0,440,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l0 = neg l0, 440)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,448,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l4 = l0 - $stack10,457,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l4 = l0 - $stack10, 457))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 440
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 445
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 448
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 457
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 445
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 448
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 456
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 456
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 457
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack8 = l3 << 1",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: void getChars(int,int,char[])>",
					"line": 457
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l2 = newarray (char)[l1],401,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l2 = newarray (char)[l1], 401)) => Node(<java.lang.String: void <init>(char[],boolean)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack4 = new java.lang.String,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.String: void <init>(char[],boolean)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403)) => Node(<java.lang.String: void <init>(char[],boolean)>,specialinvoke l0.<java.lang.Object: void <init>()>(),609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403) => (<java.lang.String: void <init>(char[],boolean)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 609)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l2 = newarray (char)[l1],401,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l2 = newarray (char)[l1], 401)) => Node(<java.lang.String: void <init>(char[],boolean)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack4 = new java.lang.String,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.String: void <init>(char[],boolean)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403)) => Node(<java.lang.String: void <init>(char[],boolean)>,specialinvoke l0.<java.lang.Object: void <init>()>(),609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, specialinvoke $stack4.<java.lang.String: void <init>(char[],boolean)>(l2, 1), 403) => (<java.lang.String: void <init>(char[],boolean)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 609))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 401
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],boolean)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],boolean)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],boolean)>",
	"line": 609
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 401
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],boolean)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],boolean)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],boolean)>",
	"line": 609
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Object: void <init>()>()",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: void <init>(char[],boolean)>",
					"line": 609
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,448,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack7 = l0 * 52429,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack7 = l0 * 52429, 456)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = $stack7 >>> 19,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = $stack7 >>> 19, 456)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = neg l0,440,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l0 = neg l0, 440)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = l0 / 100,445,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l0 = l3,448,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = l0 / 100, 445)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,$stack7 = l0 * 52429,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, $stack7 = l0 * 52429, 456)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l3 = $stack7 >>> 19,456,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l3 = $stack7 >>> 19, 456))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 440
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 445
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 448
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 456
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 456
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 445
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 448
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 456
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 456
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l3 = $stack7 >>> 19",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: void getChars(int,int,char[])>",
					"line": 456
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,$stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(),286,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,result = $stack8,285,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, result = $stack8, 285))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 286
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 285
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 286
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": 285
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "result = $stack8",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
					"line": 285
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2618
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2618
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2618
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack28 = l13 - l11,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack28 = l13 - l11, 2642)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2609
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2604
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2618
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2633
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2642
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2642
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack41 = l12 + l5",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2626
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4 = $stack16[l2],2572,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4 = $stack16[l2], 2572)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack17 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l4),2581,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack17 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l4), 2581)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4 = $stack16[l2],2572,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4 = $stack16[l2], 2572)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack17 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l4),2581,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack17 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l4), 2581))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2572
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2572
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2581
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2572
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2572
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2581
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack17 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l4)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2581
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack24 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2605
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key),271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,currentValInteger = (java.lang.Integer) $stack8,271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)) => Node(<java.lang.Integer: int intValue()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<java.lang.Integer: int intValue()>,$stack1 = l0.<java.lang.Integer: int value>,893,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(),276,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,status := @parameter0: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber),269,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, key = staticinvoke <hudson.plugins.logparser.LogParserUtils: java.lang.String getSectionCountKey(java.lang.String,int)>(status, sectionNumber), 269)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key),271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack8 = virtualinvoke $stack7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(key), 271)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,currentValInteger = (java.lang.Integer) $stack8,271,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, currentValInteger = (java.lang.Integer) $stack8, 271)) => Node(<java.lang.Integer: int intValue()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<java.lang.Integer: int intValue()>,$stack1 = l0.<java.lang.Integer: int value>,893,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>(effectiveStatus), 245) => (<hudson.plugins.logparser.LogParserParser: void incrementCounter(java.lang.String)>, currentVal = virtualinvoke $stack5.<java.lang.Integer: int intValue()>(), 263)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(),276,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, $stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>(), 276)) => Node(<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>,newVal = $stack9 + 1,276,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, virtualinvoke this.<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>(effectiveStatus, $stack19), 246) => (<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>, newVal = $stack9 + 1, 276))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 269
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 271
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 271
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: int intValue()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: int intValue()>",
	"line": 893
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 276
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 276
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 269
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 271
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 271
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: int intValue()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: int intValue()>",
	"line": 893
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
	"line": 276
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack9 = virtualinvoke currentValInteger.<java.lang.Integer: int intValue()>()",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void incrementCounterPerSection(java.lang.String,int)>",
					"line": 276
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2609
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2609
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2609
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,449,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,450,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,effectiveStatus := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus),300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(effectiveStatus), 300)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack13 = (java.lang.Integer) $stack12,300,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack13 = (java.lang.Integer) $stack12, 300)) => Node(<java.lang.Integer: java.lang.String toString()>,l0 := @this: java.lang.Integer,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300)) => Node(<java.lang.Integer: java.lang.String toString()>,$stack1 = l0.<java.lang.Integer: int value>,935,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, statusCountStr = virtualinvoke $stack13.<java.lang.Integer: java.lang.String toString()>(), 300) => (<java.lang.Integer: java.lang.String toString()>, $stack1 = l0.<java.lang.Integer: int value>, 935)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack5 = neg l0,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack5 = neg l0, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5),403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack6 = staticinvoke <java.lang.Integer: int stringSize(int)>($stack5), 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,$stack3 = $stack6 + 1,403,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, $stack3 = $stack6 + 1, 403)) => Node(<java.lang.Integer: java.lang.String toString(int)>,l1 = $stack3,400,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, l1 = $stack3, 400)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l1 := @parameter1: int,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l1,435,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l1, 435)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,449,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449)) => Node(<java.lang.Integer: void getChars(int,int,char[])>,l5 = l5 + -1,450,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack54 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(line_num), 364) => (<java.lang.String: java.lang.String valueOf(int)>, $stack1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(l0), 3099) => (<java.lang.Integer: java.lang.String toString(int)>, staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l0, l1, l2), 402) => (<java.lang.Integer: void getChars(int,int,char[])>, l5 = l5 + -1, 449))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 435
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 449
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 450
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 300
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString()>",
	"line": 935
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 403
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.String toString(int)>",
	"line": 400
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 435
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 449
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void getChars(int,int,char[])>",
	"line": 450
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l5 = l5 + -1",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: void getChars(int,int,char[])>",
					"line": 450
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2),2595,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2), 2595))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack20 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2595
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,status := @parameter2: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack35 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>("START"),328,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack35 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 328)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,status := @parameter2: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>,$stack35 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>("START"),328,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColoredAndMarked = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>(parsedLineColored, effectiveStatus, status), 252) => (<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>, $stack35 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START'), 328))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 328
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
	"line": 328
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack35 = virtualinvoke status.<java.lang.String: boolean equals(java.lang.Object)>('START')",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String addMarkerAndLink(java.lang.String,java.lang.String,java.lang.String)>",
					"line": 328
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, specialinvoke tmp$1587020590.<hudson.plugins.logparser.LogParserStatusComputer: void <init>(java.io.InputStream,java.lang.String[],java.util.regex.Pattern[],java.lang.String)>(log, $stack34, $stack33, signature), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, tmp$863313225 = (hudson.remoting.Callable) tmp$1587020590, -1)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225),351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack36 = interfaceinvoke $stack35.<hudson.remoting.VirtualChannel: java.lang.Object call(hudson.remoting.Callable)>(tmp$863313225), 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,lineStatusMatches = (java.util.HashMap) $stack36,351,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) SINK=>BASE: Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54),364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)) => Node(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>,status = (java.lang.String) $stack55,364,SourceNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>,effectiveStatus = status,228,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, effectiveStatus = status, 228)) => Node(<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>,status := @parameter1: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, parsedLine = virtualinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>(line, status), 365) => (<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>, parsedLineColored = specialinvoke this.<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>(parsedLine, effectiveStatus), 248) => (<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke status.<java.lang.String: java.lang.String toLowerCase()>(), 286) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 364
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2575
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "tmp$1587020590 = new hudson.plugins.logparser.LogParserStatusComputer",
				"location": {
					"file": "",
					"class": "hudson.plugins.logparser.LogParserParser",
					"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
					"line": 351
				},
				"stackTrace": [{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 351
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
	"line": 364
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String parseLine(java.lang.String,java.lang.String)>",
	"line": 228
},{
	"class": "hudson.plugins.logparser.LogParserParser",
	"method": "<hudson.plugins.logparser.LogParserParser: java.lang.String colorLine(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2575
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2575
				}
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "lineStatusMatches = (java.util.HashMap) $stack36",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "351"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, lineStatusMatches = (java.util.HashMap) $stack36, 351)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54)",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, $stack55 = virtualinvoke lineStatusMatches.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($stack54), 364)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "status = (java.lang.String) $stack55",
"location": {
  "file": "",
  "class": "hudson.plugins.logparser.LogParserParser",
  "method": "<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>",
  "line": "364"
},
"stackTrace": ["(<hudson.plugins.logparser.LogParserParser: void parseLogBody(hudson.model.Run,java.io.BufferedWriter,java.io.InputStream,java.util.logging.Logger)>, status = (java.lang.String) $stack55, 364)"]
}]
}
}

]
