Running soot scenario assertj-assertions-generator;org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter;getTypeDescription(Class<?>, Method);3bc2b65080edcb2c78376ccc90f9245e913f14aa
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/assertj-assertions-generator/3bc2b65080edcb2c78376ccc90f9245e913f14aa/original-without-dependencies/assertion-generator.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,43300
Time to perform Confluence 1 Inter 1,03200
Configure Soot Confluence 2 Inter 0,13800
Time to perform Confluence 2 Inter 0,23300
Visited methods: 62
Depth limit: 5
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/assertj-assertions-generator/3bc2b65080edcb2c78376ccc90f9245e913f14aa/original-without-dependencies/assertion-generator.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,69300
Runtime: 0.021s
Time to perform OA Inter 0,81000
OA Inter Visited methods: 33
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/assertj-assertions-generator/3bc2b65080edcb2c78376ccc90f9245e913f14aa/original-without-dependencies/assertion-generator.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,46400
Time to perform DFP Inter 0,77300
Depth limit: 5
CONFLICTS: []
Visited methods: 31
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/assertj-assertions-generator/3bc2b65080edcb2c78376ccc90f9245e913f14aa/original-without-dependencies/assertion-generator.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,41100
Time to perform DFP Inter 0,63000
Depth limit: 5
CONFLICTS: []
Visited methods: 31
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/assertj-assertions-generator/3bc2b65080edcb2c78376ccc90f9245e913f14aa/original-without-dependencies/assertion-generator.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,50900
Time to perform PDG 0,47500
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/assertj-assertions-generator/3bc2b65080edcb2c78376ccc90f9245e913f14aa/original-without-dependencies/assertion-generator.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,55100
Time to perform PDG 0,54600
CONFLICTS: [List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),63,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack10 == 0 goto $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),63,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),66,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack11 == 0 goto return typeDescription,66,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack14 = $stack13[0],68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack14 = $stack13[0], 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType,68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType, 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack15 == 0 goto $stack16 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack17 = $stack16[0],77,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack17 = $stack16[0], 77)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,genericArrayType#2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack17),77,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, genericArrayType#2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack17), 77))), List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),63,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack10 == 0 goto $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),63,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),66,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack11 == 0 goto return typeDescription,66,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack14 = $stack13[0],68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack14 = $stack13[0], 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType,68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType, 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack15 == 0 goto $stack16 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack17 = $stack16[0],77,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack17 = $stack16[0], 77)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,genericArrayType#2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack17),77,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, genericArrayType#2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack17), 77)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack19 = virtualinvoke genericArrayType#2.<java.lang.Class: boolean isArray()>(),78,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack19 = virtualinvoke genericArrayType#2.<java.lang.Class: boolean isArray()>(), 78)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack19 == 0 goto $stack20 = new org.assertj.assertions.generator.description.TypeName,78,SinkNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack22 = new org.assertj.assertions.generator.description.TypeName,79,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, specialinvoke $stack22.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>($stack23), 79))), List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),63,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack10 == 0 goto $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),63,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),66,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack11 == 0 goto return typeDescription,66,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack14 = $stack13[0],68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack14 = $stack13[0], 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType,68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType, 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack15 == 0 goto $stack16 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack17 = $stack16[0],77,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack17 = $stack16[0], 77)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,genericArrayType#2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack17),77,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, genericArrayType#2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack17), 77)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack19 = virtualinvoke genericArrayType#2.<java.lang.Class: boolean isArray()>(),78,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack19 = virtualinvoke genericArrayType#2.<java.lang.Class: boolean isArray()>(), 78)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack19 == 0 goto $stack20 = new org.assertj.assertions.generator.description.TypeName,78,SinkNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack20 = new org.assertj.assertions.generator.description.TypeName,82,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, specialinvoke $stack20.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(genericArrayType#2), 82))), List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),63,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack10 == 0 goto $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),63,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),66,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack11 == 0 goto return typeDescription,66,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack14 = $stack13[0],68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack14 = $stack13[0], 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType,68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType, 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack15 == 0 goto $stack16 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,genericArrayType = (java.lang.reflect.GenericArrayType) $stack27,69,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack27, 69)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack28 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(),70,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack28 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack28),70,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack28), 70))), List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),63,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack10 == 0 goto $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),63,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),66,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack11 == 0 goto return typeDescription,66,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack14 = $stack13[0],68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack14 = $stack13[0], 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType,68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType, 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack15 == 0 goto $stack16 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack17 = $stack16[0],77,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack17 = $stack16[0], 77)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,genericArrayType#2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack17),77,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, genericArrayType#2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack17), 77)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack19 = virtualinvoke genericArrayType#2.<java.lang.Class: boolean isArray()>(),78,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack19 = virtualinvoke genericArrayType#2.<java.lang.Class: boolean isArray()>(), 78)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack19 == 0 goto $stack20 = new org.assertj.assertions.generator.description.TypeName,78,SinkNode, path: ))]
 Analysis results
----------------------------
 Number of conflicts: 5
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
