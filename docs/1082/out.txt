List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),63,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack10 == 0 goto $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),63,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),66,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack11 == 0 goto return typeDescription,66,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack14 = $stack13[0],68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack14 = $stack13[0], 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType,68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType, 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack15 == 0 goto $stack16 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack17 = $stack16[0],77,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack17 = $stack16[0], 77)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,genericArrayType#2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack17),77,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, genericArrayType#2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack17), 77)))

List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),63,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack10 == 0 goto $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),63,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),66,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack11 == 0 goto return typeDescription,66,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack14 = $stack13[0],68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack14 = $stack13[0], 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType,68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType, 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack15 == 0 goto $stack16 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack17 = $stack16[0],77,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack17 = $stack16[0], 77)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,genericArrayType#2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack17),77,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, genericArrayType#2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack17), 77)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack19 = virtualinvoke genericArrayType#2.<java.lang.Class: boolean isArray()>(),78,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack19 = virtualinvoke genericArrayType#2.<java.lang.Class: boolean isArray()>(), 78)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack19 == 0 goto $stack20 = new org.assertj.assertions.generator.description.TypeName,78,SinkNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack22 = new org.assertj.assertions.generator.description.TypeName,79,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, specialinvoke $stack22.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>($stack23), 79)))

List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),63,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack10 == 0 goto $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),63,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),66,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack11 == 0 goto return typeDescription,66,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack14 = $stack13[0],68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack14 = $stack13[0], 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType,68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType, 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack15 == 0 goto $stack16 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack17 = $stack16[0],77,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack17 = $stack16[0], 77)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,genericArrayType#2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack17),77,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, genericArrayType#2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack17), 77)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack19 = virtualinvoke genericArrayType#2.<java.lang.Class: boolean isArray()>(),78,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack19 = virtualinvoke genericArrayType#2.<java.lang.Class: boolean isArray()>(), 78)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack19 == 0 goto $stack20 = new org.assertj.assertions.generator.description.TypeName,78,SinkNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack20 = new org.assertj.assertions.generator.description.TypeName,82,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, specialinvoke $stack20.<org.assertj.assertions.generator.description.TypeName: void <init>(java.lang.Class)>(genericArrayType#2), 82)))

List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),63,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack10 == 0 goto $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),63,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),66,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack11 == 0 goto return typeDescription,66,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack14 = $stack13[0],68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack14 = $stack13[0], 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType,68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType, 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack15 == 0 goto $stack16 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,genericArrayType = (java.lang.reflect.GenericArrayType) $stack27,69,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack27, 69)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack28 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(),70,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack28 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 70)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,parameterClass = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack28),70,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, parameterClass = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack28), 70)))

List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),63,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack10 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 63)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack10 == 0 goto $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),63,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),66,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack11 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType), 66)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack11 == 0 goto return typeDescription,66,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack13 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack14 = $stack13[0],68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack14 = $stack13[0], 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType,68,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack15 = $stack14 instanceof java.lang.reflect.GenericArrayType, 68)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack15 == 0 goto $stack16 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),68,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack17 = $stack16[0],77,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack17 = $stack16[0], 77)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,genericArrayType#2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack17),77,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, genericArrayType#2 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack17), 77)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,$stack19 = virtualinvoke genericArrayType#2.<java.lang.Class: boolean isArray()>(),78,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>, $stack19 = virtualinvoke genericArrayType#2.<java.lang.Class: boolean isArray()>(), 78)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: org.assertj.assertions.generator.description.TypeDescription getTypeDescription(java.lang.reflect.Method)>,if $stack19 == 0 goto $stack20 = new org.assertj.assertions.generator.description.TypeName,78,SinkNode, path: ))

