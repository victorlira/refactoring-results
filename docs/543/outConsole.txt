Running soot scenario pac4j;org.pac4j.jwt.credentials.authenticator.JwtAuthenticator;validate(TokenCredentials);7063591a9334041183818a7bf49a0ff4e49cc1cb
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/pac4j/7063591a9334041183818a7bf49a0ff4e49cc1cb/original-without-dependencies/pac4j-jwt-1.9.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,57500
Time to perform Confluence 1 Inter 0,61500
Configure Soot Confluence 2 Inter 0,19100
Time to perform Confluence 2 Inter 0,07200
Visited methods: 20
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jwt = staticinvoke <com.nimbusds.jwt.JWTParser: com.nimbusds.jwt.JWT parse(java.lang.String)>(token),124,SourceNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jwt = staticinvoke <com.nimbusds.jwt.JWTParser: com.nimbusds.jwt.JWT parse(java.lang.String)>(token), 124)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,signedJWT = (com.nimbusds.jwt.SignedJWT) jwt,132,SinkNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, signedJWT = (com.nimbusds.jwt.SignedJWT) jwt, 132)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,$stack21 = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: com.nimbusds.jose.JWSHeader getHeader()>(),146,SimpleNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, $stack21 = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: com.nimbusds.jose.JWSHeader getHeader()>(), 146)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22),146,SimpleNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22), 146)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6),148,SimpleNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6), 148)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,if verified != 0 goto tmp$411787317 = (com.nimbusds.jwt.JWT) jwt,150,SinkNode, path: )
SINK=>BASE: Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,$stack21 = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: com.nimbusds.jose.JWSHeader getHeader()>(),146,SourceNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, $stack21 = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: com.nimbusds.jose.JWSHeader getHeader()>(), 146)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22),146,SourceNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22), 146)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6),148,SourceNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6), 148)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,if verified != 0 goto tmp$1999583807 = (com.nimbusds.jwt.JWT) jwt,150,SinkNode, path: ), SOURCE=>BASE: Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jwt = staticinvoke <com.nimbusds.jwt.JWTParser: com.nimbusds.jwt.JWT parse(java.lang.String)>(token),124,SourceNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jwt = staticinvoke <com.nimbusds.jwt.JWTParser: com.nimbusds.jwt.JWT parse(java.lang.String)>(token), 124)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,signedJWT = (com.nimbusds.jwt.SignedJWT) jwt,132,SinkNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, signedJWT = (com.nimbusds.jwt.SignedJWT) jwt, 132)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,$stack21 = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: com.nimbusds.jose.JWSHeader getHeader()>(),146,SimpleNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, $stack21 = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: com.nimbusds.jose.JWSHeader getHeader()>(), 146)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22),146,SimpleNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22), 146)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6),148,SimpleNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6), 148)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,if verified != 0 goto tmp$411787317 = (com.nimbusds.jwt.JWT) jwt,150,SinkNode, path: )
SINK=>BASE: Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6),148,SourceNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6), 148)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,if verified != 0 goto tmp$1999583807 = (com.nimbusds.jwt.JWT) jwt,150,SinkNode, path: )]
java.util.NoSuchElementException: head of empty list
	at scala.collection.immutable.Nil$.head(List.scala:430)
	at scala.collection.immutable.Nil$.head(List.scala:427)
	at scala.collection.generic.TraversableForwarder.head(TraversableForwarder.scala:59)
	at scala.collection.generic.TraversableForwarder.head$(TraversableForwarder.scala:59)
	at scala.collection.mutable.ListBuffer.head(ListBuffer.scala:47)
	at br.unb.cic.analysis.svfa.confluence.DFPConfluenceAnalysis.reportConflictsConfluence(DFPConfluenceAnalysis.java:181)
	at br.unb.cic.analysis.Main.runDFPConfluenceAnalysis(Main.java:566)
	at br.unb.cic.analysis.Main.runAnalysis(Main.java:243)
	at br.unb.cic.analysis.Main.main(Main.java:80)
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/pac4j/7063591a9334041183818a7bf49a0ff4e49cc1cb/original-without-dependencies/pac4j-jwt-1.9.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,61700
Runtime: 0.013s
Time to perform OA Inter 0,68500
OA Inter Visited methods: 4
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/pac4j/7063591a9334041183818a7bf49a0ff4e49cc1cb/original-without-dependencies/pac4j-jwt-1.9.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,41200
Time to perform DFP Inter 0,51900
Depth limit: 5
CONFLICTS: DF interference in <org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>
Data flows from execution of line 124 to 148, defined in jwt = staticinvoke <com.nimbusds.jwt.JWTParser: com.nimbusds.jwt.JWT parse(java.lang.String)>(token) and propagated in verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6)
Caused by line 124 flow: path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jwt = staticinvoke <com.nimbusds.jwt.JWTParser: com.nimbusds.jwt.JWT parse(java.lang.String)>(token), 124)
Caused by line 148 flow: path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6), 148)
DF interference in <org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>
Data flows from execution of line 124 to 146, defined in jwt = staticinvoke <com.nimbusds.jwt.JWTParser: com.nimbusds.jwt.JWT parse(java.lang.String)>(token) and propagated in jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22)
Caused by line 124 flow: path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jwt = staticinvoke <com.nimbusds.jwt.JWTParser: com.nimbusds.jwt.JWT parse(java.lang.String)>(token), 124)
Caused by line 146 flow: path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22), 146)
[List(Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jwt = staticinvoke <com.nimbusds.jwt.JWTParser: com.nimbusds.jwt.JWT parse(java.lang.String)>(token),124,SourceNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jwt = staticinvoke <com.nimbusds.jwt.JWTParser: com.nimbusds.jwt.JWT parse(java.lang.String)>(token), 124)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jweObject = (com.nimbusds.jose.JWEObject) jwt,136,SimpleNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jweObject = (com.nimbusds.jose.JWEObject) jwt, 136)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,$stack17 = virtualinvoke jweObject.<com.nimbusds.jose.JWEObject: com.nimbusds.jose.Payload getPayload()>(),140,SimpleNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, $stack17 = virtualinvoke jweObject.<com.nimbusds.jose.JWEObject: com.nimbusds.jose.Payload getPayload()>(), 140)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,signedJWT = virtualinvoke $stack17.<com.nimbusds.jose.Payload: com.nimbusds.jwt.SignedJWT toSignedJWT()>(),140,SimpleNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, signedJWT = virtualinvoke $stack17.<com.nimbusds.jose.Payload: com.nimbusds.jwt.SignedJWT toSignedJWT()>(), 140)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,$stack21 = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: com.nimbusds.jose.JWSHeader getHeader()>(),146,SinkNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, $stack21 = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: com.nimbusds.jose.JWSHeader getHeader()>(), 146)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22),146,SinkNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22), 146))), List(Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jwt = staticinvoke <com.nimbusds.jwt.JWTParser: com.nimbusds.jwt.JWT parse(java.lang.String)>(token),124,SourceNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jwt = staticinvoke <com.nimbusds.jwt.JWTParser: com.nimbusds.jwt.JWT parse(java.lang.String)>(token), 124)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jweObject = (com.nimbusds.jose.JWEObject) jwt,136,SimpleNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jweObject = (com.nimbusds.jose.JWEObject) jwt, 136)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,$stack17 = virtualinvoke jweObject.<com.nimbusds.jose.JWEObject: com.nimbusds.jose.Payload getPayload()>(),140,SimpleNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, $stack17 = virtualinvoke jweObject.<com.nimbusds.jose.JWEObject: com.nimbusds.jose.Payload getPayload()>(), 140)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,signedJWT = virtualinvoke $stack17.<com.nimbusds.jose.Payload: com.nimbusds.jwt.SignedJWT toSignedJWT()>(),140,SimpleNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, signedJWT = virtualinvoke $stack17.<com.nimbusds.jose.Payload: com.nimbusds.jwt.SignedJWT toSignedJWT()>(), 140)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,$stack21 = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: com.nimbusds.jose.JWSHeader getHeader()>(),146,SinkNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, $stack21 = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: com.nimbusds.jose.JWSHeader getHeader()>(), 146)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22),146,SinkNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22), 146)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6),148,SinkNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6), 148)))]
Visited methods: 10
 Analysis results
----------------------------
 Number of conflicts: 2
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/pac4j/7063591a9334041183818a7bf49a0ff4e49cc1cb/original-without-dependencies/pac4j-jwt-1.9.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,50700
Time to perform DFP Inter 0,48200
Depth limit: 5
CONFLICTS: []
Visited methods: 10
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/pac4j/7063591a9334041183818a7bf49a0ff4e49cc1cb/original-without-dependencies/pac4j-jwt-1.9.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,43100
Time to perform PDG 0,43200
CONFLICTS: [List(Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,if $stack10 == 0 goto $stack11 = jwt instanceof com.nimbusds.jwt.EncryptedJWT,130,SourceNode, path: ) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22),146,SinkNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22), 146)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6),148,SinkNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6), 148))), List(Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,verified = 1,127,SourceNode, path: ) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6),148,SinkNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6), 148))), List(Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,if $stack10 == 0 goto $stack11 = jwt instanceof com.nimbusds.jwt.EncryptedJWT,130,SourceNode, path: ) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22),146,SinkNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22), 146))), List(Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,$stack9 = jwt instanceof com.nimbusds.jwt.PlainJWT,126,SourceNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, $stack9 = jwt instanceof com.nimbusds.jwt.PlainJWT, 126)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,if $stack9 == 0 goto $stack10 = jwt instanceof com.nimbusds.jwt.SignedJWT,126,SourceNode, path: ) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,verified = 1,127,SourceNode, path: ) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6),148,SinkNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6), 148))), List(Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,$stack9 = jwt instanceof com.nimbusds.jwt.PlainJWT,126,SourceNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, $stack9 = jwt instanceof com.nimbusds.jwt.PlainJWT, 126)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,if $stack9 == 0 goto $stack10 = jwt instanceof com.nimbusds.jwt.SignedJWT,126,SourceNode, path: ) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,if $stack10 == 0 goto $stack11 = jwt instanceof com.nimbusds.jwt.EncryptedJWT,130,SourceNode, path: ) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22),146,SinkNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22), 146))), List(Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jwt = staticinvoke <com.nimbusds.jwt.JWTParser: com.nimbusds.jwt.JWT parse(java.lang.String)>(token),124,SourceNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jwt = staticinvoke <com.nimbusds.jwt.JWTParser: com.nimbusds.jwt.JWT parse(java.lang.String)>(token), 124)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,$stack11 = jwt instanceof com.nimbusds.jwt.EncryptedJWT,133,SimpleNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, $stack11 = jwt instanceof com.nimbusds.jwt.EncryptedJWT, 133)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,if $stack11 == 0 goto tmp$284123040 = new org.pac4j.core.exception.TechnicalException,133,SimpleNode, path: ) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22),146,SinkNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22), 146)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6),148,SinkNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6), 148))), List(Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jwt = staticinvoke <com.nimbusds.jwt.JWTParser: com.nimbusds.jwt.JWT parse(java.lang.String)>(token),124,SourceNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jwt = staticinvoke <com.nimbusds.jwt.JWTParser: com.nimbusds.jwt.JWT parse(java.lang.String)>(token), 124)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,$stack11 = jwt instanceof com.nimbusds.jwt.EncryptedJWT,133,SimpleNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, $stack11 = jwt instanceof com.nimbusds.jwt.EncryptedJWT, 133)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,if $stack11 == 0 goto tmp$284123040 = new org.pac4j.core.exception.TechnicalException,133,SimpleNode, path: ) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22),146,SinkNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22), 146)))]
 Analysis results
----------------------------
 Number of conflicts: 7
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/pac4j/7063591a9334041183818a7bf49a0ff4e49cc1cb/original-without-dependencies/pac4j-jwt-1.9.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,53700
Time to perform PDG 0,45900
CONFLICTS: [List(Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6),148,SourceNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6), 148)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,if verified != 0 goto tmp$411787317 = (com.nimbusds.jwt.JWT) jwt,150,SimpleNode, path: ) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,tmp$411787317 = (com.nimbusds.jwt.JWT) jwt,-1,SimpleNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, tmp$411787317 = (com.nimbusds.jwt.JWT) jwt, -1)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,staticinvoke <org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void createJwtProfile(org.pac4j.core.credentials.TokenCredentials,com.nimbusds.jwt.JWT)>(credentials, tmp$411787317),156,SinkNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, staticinvoke <org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void createJwtProfile(org.pac4j.core.credentials.TokenCredentials,com.nimbusds.jwt.JWT)>(credentials, tmp$411787317), 156))), List(Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22),146,SourceNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, jweObject#6 = interfaceinvoke $stack20.<com.nimbusds.jose.proc.JWSVerifierFactory: com.nimbusds.jose.JWSVerifier createJWSVerifier(com.nimbusds.jose.JWSHeader,java.security.Key)>($stack21, $stack22), 146)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6),148,SourceNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, verified = virtualinvoke signedJWT.<com.nimbusds.jwt.SignedJWT: boolean verify(com.nimbusds.jose.JWSVerifier)>(jweObject#6), 148)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,if verified != 0 goto tmp$411787317 = (com.nimbusds.jwt.JWT) jwt,150,SimpleNode, path: ) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,tmp$411787317 = (com.nimbusds.jwt.JWT) jwt,-1,SimpleNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, tmp$411787317 = (com.nimbusds.jwt.JWT) jwt, -1)) => Node(<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>,staticinvoke <org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void createJwtProfile(org.pac4j.core.credentials.TokenCredentials,com.nimbusds.jwt.JWT)>(credentials, tmp$411787317),156,SinkNode, path: (<org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void validate(org.pac4j.core.credentials.TokenCredentials)>, staticinvoke <org.pac4j.jwt.credentials.authenticator.JwtAuthenticator: void createJwtProfile(org.pac4j.core.credentials.TokenCredentials,com.nimbusds.jwt.JWT)>(credentials, tmp$411787317), 156)))]
 Analysis results
----------------------------
 Number of conflicts: 2
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
