Running soot scenario javacpp;org.bytedeco.javacpp.tools.Builder;generateAndCompile(Class[], String);5944112bb41dbeba870a2bcfe190a7ca369c2cda
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/javacpp/5944112bb41dbeba870a2bcfe190a7ca369c2cda/original-without-dependencies/javacpp.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,63400
Execution exceeded the timeout of 240 secondsRunning ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/javacpp/5944112bb41dbeba870a2bcfe190a7ca369c2cda/original-without-dependencies/javacpp.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,78200
Runtime: 0.732s
Time to perform OA Inter 2,50000
OA Inter Visited methods: 699
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/javacpp/5944112bb41dbeba870a2bcfe190a7ca369c2cda/original-without-dependencies/javacpp.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,77400
Execution exceeded the timeout of 240 secondsRunning right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/javacpp/5944112bb41dbeba870a2bcfe190a7ca369c2cda/original-without-dependencies/javacpp.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,66400
Execution exceeded the timeout of 240 secondsRunning left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/javacpp/5944112bb41dbeba870a2bcfe190a7ca369c2cda/original-without-dependencies/javacpp.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,57900
Time to perform PDG 1,39400
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/javacpp/5944112bb41dbeba870a2bcfe190a7ca369c2cda/original-without-dependencies/javacpp.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,50300
Time to perform PDG 1,51500
CONFLICTS: [List(Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack125 = new java.io.File,349,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack125.<java.io.File: void <init>(java.net.URI)>($stack126), 349)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,packageDir = $stack125,349,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, packageDir = $stack125, 349)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack132 = new java.io.File,350,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack132.<java.io.File: void <init>(java.io.File,java.lang.String)>(packageDir, platform), 350)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,targetDir = $stack132,350,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, targetDir = $stack132, 350)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack133 = new java.io.File,353,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack133.<java.io.File: void <init>(java.io.File,java.lang.String)>(targetDir, libraryPath), 353)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,outputPath = $stack133,353,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, outputPath = $stack133, 353)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack60 = virtualinvoke outputPath.<java.io.File: java.lang.String getPath()>(),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack60 = virtualinvoke outputPath.<java.io.File: java.lang.String getPath()>(), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack59 = new java.lang.StringBuilder,375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack59.<java.lang.StringBuilder: void <init>()>(), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack61 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack60),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack61 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack60), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack63 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack62),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack63 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack62), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(libraryName),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(libraryName), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,targetDir#24 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, targetDir#24 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath),377,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath), 377)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if exitValue != 0 goto staticinvoke <java.lang.System: void exit(int)>(exitValue),378,SimpleNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if $stack72 == 0 goto $stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>,379,SinkNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>,383,SinkNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>, 383))), List(Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath),377,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath), 377)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if exitValue != 0 goto staticinvoke <java.lang.System: void exit(int)>(exitValue),378,SimpleNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if $stack72 == 0 goto $stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>,379,SinkNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>,383,SinkNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>, 383))), List(Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack125 = new java.io.File,349,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack125.<java.io.File: void <init>(java.net.URI)>($stack126), 349)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,packageDir = $stack125,349,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, packageDir = $stack125, 349)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack132 = new java.io.File,350,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack132.<java.io.File: void <init>(java.io.File,java.lang.String)>(packageDir, platform), 350)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,targetDir = $stack132,350,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, targetDir = $stack132, 350)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack133 = new java.io.File,353,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack133.<java.io.File: void <init>(java.io.File,java.lang.String)>(targetDir, libraryPath), 353)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,outputPath = $stack133,353,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, outputPath = $stack133, 353)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack60 = virtualinvoke outputPath.<java.io.File: java.lang.String getPath()>(),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack60 = virtualinvoke outputPath.<java.io.File: java.lang.String getPath()>(), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack59 = new java.lang.StringBuilder,375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack59.<java.lang.StringBuilder: void <init>()>(), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack61 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack60),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack61 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack60), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack63 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack62),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack63 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack62), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(libraryName),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(libraryName), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,targetDir#24 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, targetDir#24 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath),377,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath), 377)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if exitValue != 0 goto staticinvoke <java.lang.System: void exit(int)>(exitValue),378,SimpleNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if $stack72 == 0 goto $stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>,379,SinkNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,virtualinvoke $stack80.<org.bytedeco.javacpp.tools.Logger: void info(java.lang.String)>($stack83),380,SinkNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, virtualinvoke $stack80.<org.bytedeco.javacpp.tools.Logger: void info(java.lang.String)>($stack83), 380))), List(Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack125 = new java.io.File,349,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack125.<java.io.File: void <init>(java.net.URI)>($stack126), 349)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,packageDir = $stack125,349,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, packageDir = $stack125, 349)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack132 = new java.io.File,350,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack132.<java.io.File: void <init>(java.io.File,java.lang.String)>(packageDir, platform), 350)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,targetDir = $stack132,350,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, targetDir = $stack132, 350)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack133 = new java.io.File,353,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack133.<java.io.File: void <init>(java.io.File,java.lang.String)>(targetDir, libraryPath), 353)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,outputPath = $stack133,353,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, outputPath = $stack133, 353)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack60 = virtualinvoke outputPath.<java.io.File: java.lang.String getPath()>(),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack60 = virtualinvoke outputPath.<java.io.File: java.lang.String getPath()>(), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack59 = new java.lang.StringBuilder,375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack59.<java.lang.StringBuilder: void <init>()>(), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack61 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack60),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack61 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack60), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack63 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack62),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack63 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack62), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(libraryName),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(libraryName), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,targetDir#24 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, targetDir#24 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath),377,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath), 377)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if exitValue != 0 goto staticinvoke <java.lang.System: void exit(int)>(exitValue),378,SimpleNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if $stack72 == 0 goto $stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>,379,SinkNode, path: )), List(Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath),377,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath), 377)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if exitValue != 0 goto staticinvoke <java.lang.System: void exit(int)>(exitValue),378,SimpleNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if $stack72 == 0 goto $stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>,379,SinkNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,virtualinvoke $stack80.<org.bytedeco.javacpp.tools.Logger: void info(java.lang.String)>($stack83),380,SinkNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, virtualinvoke $stack80.<org.bytedeco.javacpp.tools.Logger: void info(java.lang.String)>($stack83), 380))), List(Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath),377,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath), 377)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if exitValue != 0 goto staticinvoke <java.lang.System: void exit(int)>(exitValue),378,SimpleNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if $stack72 == 0 goto $stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>,379,SinkNode, path: ))]
 Analysis results
----------------------------
 Number of conflicts: 6
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
