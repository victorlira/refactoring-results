List(Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack125 = new java.io.File,349,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack125.<java.io.File: void <init>(java.net.URI)>($stack126), 349)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,packageDir = $stack125,349,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, packageDir = $stack125, 349)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack132 = new java.io.File,350,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack132.<java.io.File: void <init>(java.io.File,java.lang.String)>(packageDir, platform), 350)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,targetDir = $stack132,350,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, targetDir = $stack132, 350)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack133 = new java.io.File,353,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack133.<java.io.File: void <init>(java.io.File,java.lang.String)>(targetDir, libraryPath), 353)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,outputPath = $stack133,353,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, outputPath = $stack133, 353)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack60 = virtualinvoke outputPath.<java.io.File: java.lang.String getPath()>(),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack60 = virtualinvoke outputPath.<java.io.File: java.lang.String getPath()>(), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack59 = new java.lang.StringBuilder,375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack59.<java.lang.StringBuilder: void <init>()>(), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack61 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack60),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack61 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack60), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack63 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack62),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack63 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack62), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(libraryName),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(libraryName), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,targetDir#24 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, targetDir#24 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath),377,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath), 377)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if exitValue != 0 goto staticinvoke <java.lang.System: void exit(int)>(exitValue),378,SimpleNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if $stack72 == 0 goto $stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>,379,SinkNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>,383,SinkNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>, 383)))

List(Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath),377,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath), 377)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if exitValue != 0 goto staticinvoke <java.lang.System: void exit(int)>(exitValue),378,SimpleNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if $stack72 == 0 goto $stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>,379,SinkNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>,383,SinkNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>, 383)))

List(Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack125 = new java.io.File,349,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack125.<java.io.File: void <init>(java.net.URI)>($stack126), 349)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,packageDir = $stack125,349,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, packageDir = $stack125, 349)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack132 = new java.io.File,350,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack132.<java.io.File: void <init>(java.io.File,java.lang.String)>(packageDir, platform), 350)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,targetDir = $stack132,350,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, targetDir = $stack132, 350)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack133 = new java.io.File,353,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack133.<java.io.File: void <init>(java.io.File,java.lang.String)>(targetDir, libraryPath), 353)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,outputPath = $stack133,353,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, outputPath = $stack133, 353)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack60 = virtualinvoke outputPath.<java.io.File: java.lang.String getPath()>(),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack60 = virtualinvoke outputPath.<java.io.File: java.lang.String getPath()>(), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack59 = new java.lang.StringBuilder,375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack59.<java.lang.StringBuilder: void <init>()>(), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack61 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack60),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack61 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack60), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack63 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack62),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack63 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack62), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(libraryName),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(libraryName), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,targetDir#24 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, targetDir#24 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath),377,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath), 377)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if exitValue != 0 goto staticinvoke <java.lang.System: void exit(int)>(exitValue),378,SimpleNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if $stack72 == 0 goto $stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>,379,SinkNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,virtualinvoke $stack80.<org.bytedeco.javacpp.tools.Logger: void info(java.lang.String)>($stack83),380,SinkNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, virtualinvoke $stack80.<org.bytedeco.javacpp.tools.Logger: void info(java.lang.String)>($stack83), 380)))

List(Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack125 = new java.io.File,349,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack125.<java.io.File: void <init>(java.net.URI)>($stack126), 349)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,packageDir = $stack125,349,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, packageDir = $stack125, 349)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack132 = new java.io.File,350,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack132.<java.io.File: void <init>(java.io.File,java.lang.String)>(packageDir, platform), 350)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,targetDir = $stack132,350,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, targetDir = $stack132, 350)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack133 = new java.io.File,353,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack133.<java.io.File: void <init>(java.io.File,java.lang.String)>(targetDir, libraryPath), 353)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,outputPath = $stack133,353,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, outputPath = $stack133, 353)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack60 = virtualinvoke outputPath.<java.io.File: java.lang.String getPath()>(),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack60 = virtualinvoke outputPath.<java.io.File: java.lang.String getPath()>(), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack59 = new java.lang.StringBuilder,375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, specialinvoke $stack59.<java.lang.StringBuilder: void <init>()>(), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack61 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack60),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack61 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack60), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack63 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack62),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack63 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack62), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(libraryName),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(libraryName), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,targetDir#24 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(),375,SimpleNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, targetDir#24 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(), 375)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath),377,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath), 377)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if exitValue != 0 goto staticinvoke <java.lang.System: void exit(int)>(exitValue),378,SimpleNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if $stack72 == 0 goto $stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>,379,SinkNode, path: ))

List(Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath),377,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath), 377)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if exitValue != 0 goto staticinvoke <java.lang.System: void exit(int)>(exitValue),378,SimpleNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if $stack72 == 0 goto $stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>,379,SinkNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,virtualinvoke $stack80.<org.bytedeco.javacpp.tools.Logger: void info(java.lang.String)>($stack83),380,SinkNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, virtualinvoke $stack80.<org.bytedeco.javacpp.tools.Logger: void info(java.lang.String)>($stack83), 380)))

List(Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath),377,SourceNode, path: (<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>, exitValue = virtualinvoke this.<org.bytedeco.javacpp.tools.Builder: int compile(java.lang.String,java.lang.String,org.bytedeco.javacpp.ClassProperties,java.io.File)>(resourceName, targetDir#24, p, outputPath), 377)) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if exitValue != 0 goto staticinvoke <java.lang.System: void exit(int)>(exitValue),378,SimpleNode, path: ) => Node(<org.bytedeco.javacpp.tools.Builder: java.io.File generateAndCompile(java.lang.Class[],java.lang.String)>,if $stack72 == 0 goto $stack74 = this.<org.bytedeco.javacpp.tools.Builder: org.bytedeco.javacpp.tools.Logger logger>,379,SinkNode, path: ))

