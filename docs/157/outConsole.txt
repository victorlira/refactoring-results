Running soot scenario spark;spark.http.matching.AfterFilters;execute(RouteContext);b4ee63ef98b7572f5045857b32329ac34634d8a3
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/b4ee63ef98b7572f5045857b32329ac34634d8a3/original-without-dependencies/spark-core-2.4-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,62300
Time to perform Confluence 1 Inter 0,99600
Configure Soot Confluence 2 Inter 0,17100
Time to perform Confluence 2 Inter 1,00300
Visited methods: 94
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>,$stack1 = this.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper>,121,SourceNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack25 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>(), 52)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack29 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>(),59,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack29 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>(), 59))
SINK=>BASE: Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13),36,SourceNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),40,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 40)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),70,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 70)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterMatch = (spark.routematch.RouteMatch) $stack18,70,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterMatch = (spark.routematch.RouteMatch) $stack18, 70)) => Node(<spark.routematch.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.routematch.RouteMatch,-1,SimpleNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 41)) => Node(<spark.routematch.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.routematch.RouteMatch: java.lang.Object target>,48,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 41)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(),41,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 41)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,request#3 = (spark.FilterImpl) filterTarget,58,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, request#3 = (spark.FilterImpl) filterTarget, 58)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,virtualinvoke request#3.<spark.FilterImpl: void handle(spark.Request,spark.Response)>($stack28, $stack29),59,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, virtualinvoke request#3.<spark.FilterImpl: void handle(spark.Request,spark.Response)>($stack28, $stack29), 59)), SOURCE=>BASE: Node(<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>,$stack1 = this.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper>,121,SourceNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack25 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>(), 52)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack29 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>(),59,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack29 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>(), 59))
SINK=>BASE: Node(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>,$stack9 = new java.util.ArrayList,107,SourceNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, specialinvoke $stack9.<java.util.ArrayList: void <init>()>(), 107)) => Node(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>,matchSet = $stack9,107,SourceNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13),36,SourceNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),40,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 40)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),70,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 70)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterMatch = (spark.routematch.RouteMatch) $stack18,70,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterMatch = (spark.routematch.RouteMatch) $stack18, 70)) => Node(<spark.routematch.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.routematch.RouteMatch,-1,SimpleNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 41)) => Node(<spark.routematch.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.routematch.RouteMatch: java.lang.Object target>,48,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 41)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(),41,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 41)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,request#3 = (spark.FilterImpl) filterTarget,58,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, request#3 = (spark.FilterImpl) filterTarget, 58)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,virtualinvoke request#3.<spark.FilterImpl: void handle(spark.Request,spark.Response)>($stack28, $stack29),59,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, virtualinvoke request#3.<spark.FilterImpl: void handle(spark.Request,spark.Response)>($stack28, $stack29), 59)), SOURCE=>BASE: Node(<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>,$stack1 = this.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper>,121,SourceNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack25 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>(), 52)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack29 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>(),59,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack29 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>(), 59))
SINK=>BASE: Node(<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>,$stack1 = this.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher>,52,SourceNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack10 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack10 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(),36,SourceNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack10 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13),36,SourceNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),40,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 40)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),70,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 70)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterMatch = (spark.routematch.RouteMatch) $stack18,70,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterMatch = (spark.routematch.RouteMatch) $stack18, 70)) => Node(<spark.routematch.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.routematch.RouteMatch,-1,SimpleNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 41)) => Node(<spark.routematch.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.routematch.RouteMatch: java.lang.Object target>,48,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 41)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(),41,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 41)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,request#3 = (spark.FilterImpl) filterTarget,58,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, request#3 = (spark.FilterImpl) filterTarget, 58)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,virtualinvoke request#3.<spark.FilterImpl: void handle(spark.Request,spark.Response)>($stack28, $stack29),59,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, virtualinvoke request#3.<spark.FilterImpl: void handle(spark.Request,spark.Response)>($stack28, $stack29), 59))]
Confluence interference in <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>
Confluence flows from execution of lines 52 and 36 to line 59, defined in $stack25 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>() and matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13) and used in virtualinvoke request#3.<spark.FilterImpl: void handle(spark.Request,spark.Response)>($stack28, $stack29)
Caused by line 52 flow: path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack25 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>(), 52)
Caused by line 36 flow: path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)
Caused by line 59 flow: path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, virtualinvoke request#3.<spark.FilterImpl: void handle(spark.Request,spark.Response)>($stack28, $stack29), 59)
 Analysis results
----------------------------
 Number of conflicts: 3
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/b4ee63ef98b7572f5045857b32329ac34634d8a3/original-without-dependencies/spark-core-2.4-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,51000
Runtime: 0.017s
Time to perform OA Inter 0,60100
OA Inter Visited methods: 11
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/b4ee63ef98b7572f5045857b32329ac34634d8a3/original-without-dependencies/spark-core-2.4-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,63300
Time to perform DFP Inter 0,94800
Depth limit: 5
CONFLICTS: []
Visited methods: 47
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/b4ee63ef98b7572f5045857b32329ac34634d8a3/original-without-dependencies/spark-core-2.4-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,61100
Time to perform DFP Inter 1,22400
Depth limit: 5
CONFLICTS: []
Visited methods: 48
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/b4ee63ef98b7572f5045857b32329ac34634d8a3/original-without-dependencies/spark-core-2.4-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,49500
Time to perform PDG 0,41100
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/b4ee63ef98b7572f5045857b32329ac34634d8a3/original-without-dependencies/spark-core-2.4-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,49300
Time to perform PDG 0,48900
CONFLICTS: [List(Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack10 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(),36,SourceNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack10 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13),36,SourceNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),40,SimpleNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 40)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),70,SimpleNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 70)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterMatch = (spark.routematch.RouteMatch) $stack18,70,SimpleNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterMatch = (spark.routematch.RouteMatch) $stack18, 70)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(),41,SimpleNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 41)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack20 = filterTarget instanceof spark.FilterImpl,43,SimpleNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack20 = filterTarget instanceof spark.FilterImpl, 43)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,if $stack20 == 0 goto (branch),43,SimpleNode, path: ) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack27 = content instanceof java.lang.String,54,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack27 = content instanceof java.lang.String, 54)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,if $stack27 == 0 goto request#3 = (spark.FilterImpl) filterTarget,54,SinkNode, path: ) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack33 = (java.lang.String) content,55,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack33 = (java.lang.String) content, 55))), List(Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack10 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(),36,SourceNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack10 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13),36,SourceNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),40,SimpleNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 40)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),70,SimpleNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 70)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterMatch = (spark.routematch.RouteMatch) $stack18,70,SimpleNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterMatch = (spark.routematch.RouteMatch) $stack18, 70)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(),41,SimpleNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 41)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack20 = filterTarget instanceof spark.FilterImpl,43,SimpleNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack20 = filterTarget instanceof spark.FilterImpl, 43)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,if $stack20 == 0 goto (branch),43,SimpleNode, path: ) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack27 = content instanceof java.lang.String,54,SinkNode, path: (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack27 = content instanceof java.lang.String, 54)))]
 Analysis results
----------------------------
 Number of conflicts: 2
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
