Running soot scenario jsondiff;foodev.jsondiff.JsonDiff;findLeaves(Node, JsonElement, List<Leaf>);cd3cba0a2fcc4f07a4e04f0e729962c2bbd6b769
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jsondiff/cd3cba0a2fcc4f07a4e04f0e729962c2bbd6b769/original-without-dependencies/jsondiff-1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,45100
Time to perform Confluence 1 Inter 0,48300
Configure Soot Confluence 2 Inter 0,21200
Time to perform Confluence 2 Inter 0,08200
Visited methods: 18
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(),361,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(), 361)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if i#6 >= e#7 goto return,361,SinkNode, path: )
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(),361,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(), 361)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if i#6 >= e#7 goto return,361,SinkNode, path: ), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850))
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack10 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(),345,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack10 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(), 345)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if $stack10 == 0 goto $stack11 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonArray()>(),345,SinkNode, path: )
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack11 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonArray()>(),345,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack11 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonArray()>(), 345)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if $stack11 == 0 goto return,345,SinkNode, path: ), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack10 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(),345,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack10 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(), 345)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if $stack10 == 0 goto $stack11 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonArray()>(),345,SinkNode, path: )
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack11 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonArray()>(),345,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack11 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonArray()>(), 345)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if $stack11 == 0 goto return,345,SinkNode, path: ), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363))
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352))
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850))
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363))
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831))
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831)), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363))
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831))
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831)), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(),361,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(), 361)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if i#6 >= e#7 goto return,361,SinkNode, path: )
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(),361,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(), 361)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if i#6 >= e#7 goto return,361,SinkNode, path: ), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831))
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831)), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,newParent#8 = $stack13,363,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, newParent#8 = $stack13, 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,this := @this: foodev.jsondiff.JsonDiff$ArrNode,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack10 = this.<foodev.jsondiff.JsonDiff$ArrNode: int adjustOffset>,671,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack10 = this.<foodev.jsondiff.JsonDiff$ArrNode: int adjustOffset>, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832))
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,newParent#8 = $stack13,363,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, newParent#8 = $stack13, 363)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,parent := @parameter0: foodev.jsondiff.JsonDiff$Node,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el),343,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343))
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el),343,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,newParent#8 = $stack13,363,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, newParent#8 = $stack13, 363)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,parent := @parameter0: foodev.jsondiff.JsonDiff$Node,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el),343,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343))
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el),343,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,return i,673,SinkNode, path: )
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,return i,673,SinkNode, path: ), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,return i,673,SinkNode, path: )
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,return i,673,SinkNode, path: ), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352))
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack10 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(),345,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack10 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(), 345)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if $stack10 == 0 goto $stack11 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonArray()>(),345,SinkNode, path: )
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack11 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonArray()>(),345,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack11 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonArray()>(), 345)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if $stack11 == 0 goto return,345,SinkNode, path: ), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,return i,673,SinkNode, path: )
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,return i,673,SinkNode, path: ), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,newParent#8 = $stack13,363,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, newParent#8 = $stack13, 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,this := @this: foodev.jsondiff.JsonDiff$ArrNode,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack10 = this.<foodev.jsondiff.JsonDiff$ArrNode: int adjustOffset>,671,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack10 = this.<foodev.jsondiff.JsonDiff$ArrNode: int adjustOffset>, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832))
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,newParent#8 = $stack13,363,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, newParent#8 = $stack13, 363)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,parent := @parameter0: foodev.jsondiff.JsonDiff$Node,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el),343,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343))
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el),343,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,newParent#8 = $stack13,363,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, newParent#8 = $stack13, 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,this := @this: foodev.jsondiff.JsonDiff$ArrNode,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack10 = this.<foodev.jsondiff.JsonDiff$ArrNode: int adjustOffset>,671,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack10 = this.<foodev.jsondiff.JsonDiff$ArrNode: int adjustOffset>, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832))
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(),361,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(), 361)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if i#6 >= e#7 goto return,361,SinkNode, path: )
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(),361,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(), 361)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if i#6 >= e#7 goto return,361,SinkNode, path: ), SOURCE=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850))
SINK=>BASE: Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850))]
java.util.NoSuchElementException: head of empty list
	at scala.collection.immutable.Nil$.head(List.scala:430)
	at scala.collection.immutable.Nil$.head(List.scala:427)
	at scala.collection.generic.TraversableForwarder.head(TraversableForwarder.scala:59)
	at scala.collection.generic.TraversableForwarder.head$(TraversableForwarder.scala:59)
	at scala.collection.mutable.ListBuffer.head(ListBuffer.scala:47)
	at br.unb.cic.analysis.svfa.confluence.DFPConfluenceAnalysis.reportConflictsConfluence(DFPConfluenceAnalysis.java:181)
	at br.unb.cic.analysis.Main.runDFPConfluenceAnalysis(Main.java:566)
	at br.unb.cic.analysis.Main.runAnalysis(Main.java:243)
	at br.unb.cic.analysis.Main.main(Main.java:80)
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jsondiff/cd3cba0a2fcc4f07a4e04f0e729962c2bbd6b769/original-without-dependencies/jsondiff-1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,69100
Runtime: 0.042s
Time to perform OA Inter 0,79800
OA Inter Visited methods: 21
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jsondiff/cd3cba0a2fcc4f07a4e04f0e729962c2bbd6b769/original-without-dependencies/jsondiff-1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,40200
Time to perform DFP Inter 0,53700
Depth limit: 5
CONFLICTS: DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 350 to 348, defined in i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>() and propagated in interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28)
Caused by line 350 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)
Caused by line 348 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 363 to 348, defined in i#6 = i#6 + 1 and propagated in interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28)
Caused by line 363 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)
Caused by line 348 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 347 to 347, defined in $stack26 = <foodev.jsondiff.JsonDiff: java.util.Comparator ENTRY_COMPARATOR> and propagated in specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26)
Caused by line 347 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)
Caused by line 347 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 369 to 348, defined in $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6) and propagated in interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28)
Caused by line 369 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)
Caused by line 348 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 353 to 348, defined in $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>() and propagated in interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28)
Caused by line 353 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)
Caused by line 348 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 359 to 348, defined in memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el and propagated in interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28)
Caused by line 359 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)
Caused by line 348 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 348 to 348, defined in $stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>() and propagated in interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28)
Caused by line 348 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(), 348)
Caused by line 348 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 347 to 348, defined in $stack25 = new java.util.TreeSet and propagated in interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28)
Caused by line 347 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)
Caused by line 348 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 376 to 348, defined in e = (java.util.Map$Entry) $stack32 and propagated in interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28)
Caused by line 376 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)
Caused by line 348 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348)
[List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i#6 = i#6 + 1,361,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el,348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el, 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(),348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(), 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28),348,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el,348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el, 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(),348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(), 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28),348,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el,348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el, 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(),348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(), 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28),348,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(),348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(), 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28),348,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el,348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el, 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(),348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(), 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28),348,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack26 = <foodev.jsondiff.JsonDiff: java.util.Comparator ENTRY_COMPARATOR>,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26),347,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28),348,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack31 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack31 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if $stack31 == 0 goto (branch),350,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack31 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack31 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if $stack31 == 0 goto (branch),350,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el,348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el, 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(),348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(), 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28),348,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el,348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el, 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(),348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(), 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28),348,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348)))]
Visited methods: 9
 Analysis results
----------------------------
 Number of conflicts: 11
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jsondiff/cd3cba0a2fcc4f07a4e04f0e729962c2bbd6b769/original-without-dependencies/jsondiff-1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,56100
Time to perform DFP Inter 0,52500
Depth limit: 5
CONFLICTS: DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 350 to 363, defined in i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>() and propagated in specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6)
Caused by line 350 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)
Caused by line 363 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 347 to 343, defined in $stack25 = new java.util.TreeSet and propagated in specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el)
Caused by line 347 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)
Caused by line 343 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 350 to 353, defined in i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>() and propagated in $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>()
Caused by line 350 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)
Caused by line 353 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 347 to 343, defined in $stack25 = new java.util.TreeSet and propagated in this.<foodev.jsondiff.JsonDiff$Leaf: foodev.jsondiff.jsonwrap.JzonElement val> = val
Caused by line 347 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)
Caused by line 343 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343) => (<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>, this.<foodev.jsondiff.JsonDiff$Leaf: foodev.jsondiff.jsonwrap.JzonElement val> = val, 511)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 350 to 352, defined in i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>() and propagated in this.<foodev.jsondiff.JsonDiff$ObjNode: java.lang.String key> = key
Caused by line 350 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)
Caused by line 352 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352) => (<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>, this.<foodev.jsondiff.JsonDiff$ObjNode: java.lang.String key> = key, 630)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 350 to 352, defined in i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>() and propagated in specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35)
Caused by line 350 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)
Caused by line 352 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 359 to 366, defined in memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el and propagated in i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed)
Caused by line 359 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)
Caused by line 366 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 359 to 343, defined in memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el and propagated in specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el)
Caused by line 359 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)
Caused by line 343 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 359 to 366, defined in memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el and propagated in $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1)
Caused by line 359 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)
Caused by line 366 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 359 to 363, defined in memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el and propagated in this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.jsonwrap.JzonElement el> = el
Caused by line 359 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)
Caused by line 363 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363) => (<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>, this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.jsonwrap.JzonElement el> = el, 661)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 347 to 366, defined in $stack25 = new java.util.TreeSet and propagated in i = $stack6 + $stack7
Caused by line 347 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)
Caused by line 366 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 350 to 376, defined in i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>() and propagated in e = (java.util.Map$Entry) $stack32
Caused by line 350 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)
Caused by line 376 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 350 to 343, defined in i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>() and propagated in this.<foodev.jsondiff.JsonDiff$Leaf: foodev.jsondiff.jsonwrap.JzonElement val> = val
Caused by line 350 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)
Caused by line 343 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343) => (<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>, this.<foodev.jsondiff.JsonDiff$Leaf: foodev.jsondiff.jsonwrap.JzonElement val> = val, 511)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 350 to 369, defined in i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>() and propagated in staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent#8, $stack14, leaves, arrs)
Caused by line 350 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)
Caused by line 369 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent#8, $stack14, leaves, arrs), 369)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 347 to 353, defined in $stack25 = new java.util.TreeSet and propagated in $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>()
Caused by line 347 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)
Caused by line 353 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 347 to 376, defined in $stack25 = new java.util.TreeSet and propagated in e = (java.util.Map$Entry) $stack32
Caused by line 347 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)
Caused by line 376 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 359 to 369, defined in memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el and propagated in staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent#8, $stack14, leaves, arrs)
Caused by line 359 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)
Caused by line 369 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent#8, $stack14, leaves, arrs), 369)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 350 to 343, defined in i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>() and propagated in specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el)
Caused by line 350 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)
Caused by line 343 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 359 to 343, defined in memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el and propagated in this.<foodev.jsondiff.JsonDiff$Leaf: foodev.jsondiff.jsonwrap.JzonElement val> = val
Caused by line 359 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)
Caused by line 343 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343) => (<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>, this.<foodev.jsondiff.JsonDiff$Leaf: foodev.jsondiff.jsonwrap.JzonElement val> = val, 511)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 347 to 363, defined in $stack25 = new java.util.TreeSet and propagated in specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6)
Caused by line 347 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)
Caused by line 363 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 347 to 352, defined in $stack25 = new java.util.TreeSet and propagated in specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35)
Caused by line 347 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)
Caused by line 352 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 350 to 363, defined in i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>() and propagated in this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.jsonwrap.JzonElement el> = el
Caused by line 350 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)
Caused by line 363 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363) => (<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>, this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.jsonwrap.JzonElement el> = el, 661)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 350 to 366, defined in i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>() and propagated in $stack11 = $stack9 + $stack8
Caused by line 350 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)
Caused by line 366 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 347 to 363, defined in $stack25 = new java.util.TreeSet and propagated in this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.jsonwrap.JzonElement el> = el
Caused by line 347 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)
Caused by line 363 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363) => (<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>, this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.jsonwrap.JzonElement el> = el, 661)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 359 to 366, defined in memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el and propagated in $stack11 = $stack9 + $stack8
Caused by line 359 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)
Caused by line 366 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 359 to 363, defined in memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el and propagated in specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6)
Caused by line 359 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)
Caused by line 363 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 347 to 352, defined in $stack25 = new java.util.TreeSet and propagated in this.<foodev.jsondiff.JsonDiff$ObjNode: java.lang.String key> = key
Caused by line 347 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)
Caused by line 352 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352) => (<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>, this.<foodev.jsondiff.JsonDiff$ObjNode: java.lang.String key> = key, 630)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 350 to 366, defined in i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>() and propagated in $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1)
Caused by line 350 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)
Caused by line 366 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 359 to 366, defined in memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el and propagated in i = $stack6 + $stack7
Caused by line 359 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)
Caused by line 366 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 350 to 366, defined in i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>() and propagated in i = $stack6 + $stack7
Caused by line 350 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)
Caused by line 366 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 347 to 366, defined in $stack25 = new java.util.TreeSet and propagated in i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed)
Caused by line 347 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)
Caused by line 366 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 347 to 366, defined in $stack25 = new java.util.TreeSet and propagated in $stack11 = $stack9 + $stack8
Caused by line 347 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)
Caused by line 366 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 347 to 366, defined in $stack25 = new java.util.TreeSet and propagated in $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1)
Caused by line 347 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)
Caused by line 366 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 347 to 369, defined in $stack25 = new java.util.TreeSet and propagated in staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent#8, $stack14, leaves, arrs)
Caused by line 347 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)
Caused by line 369 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent#8, $stack14, leaves, arrs), 369)
DF interference in <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>
Data flows from execution of line 350 to 366, defined in i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>() and propagated in i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed)
Caused by line 350 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)
Caused by line 366 flow: path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)
[List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack10 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(),345,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack10 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(), 345)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if $stack10 == 0 goto $stack11 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonArray()>(),345,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>,key := @parameter1: java.lang.String,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>,this.<foodev.jsondiff.JsonDiff$ObjNode: java.lang.String key> = key,630,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352) => (<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>, this.<foodev.jsondiff.JsonDiff$ObjNode: java.lang.String key> = key, 630))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el),343,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>,key := @parameter1: java.lang.String,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>,this.<foodev.jsondiff.JsonDiff$ObjNode: java.lang.String key> = key,630,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352) => (<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>, this.<foodev.jsondiff.JsonDiff$ObjNode: java.lang.String key> = key, 630))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>,this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.jsonwrap.JzonElement el> = el,661,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363) => (<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>, this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.jsonwrap.JzonElement el> = el, 661))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent#8, $stack14, leaves, arrs),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent#8, $stack14, leaves, arrs), 369))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack10 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(),345,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack10 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(), 345)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if $stack10 == 0 goto $stack11 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonArray()>(),345,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(),361,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(), 361)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if i#6 >= e#7 goto return,361,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent#8, $stack14, leaves, arrs),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent#8, $stack14, leaves, arrs), 369))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(),361,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(), 361)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if i#6 >= e#7 goto return,361,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent#8, $stack14, leaves, arrs),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent#8, $stack14, leaves, arrs), 369))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>,val := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>,this.<foodev.jsondiff.JsonDiff$Leaf: foodev.jsondiff.jsonwrap.JzonElement val> = val,511,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343) => (<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>, this.<foodev.jsondiff.JsonDiff$Leaf: foodev.jsondiff.jsonwrap.JzonElement val> = val, 511))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack10 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(),345,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack10 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(), 345)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if $stack10 == 0 goto $stack11 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonArray()>(),345,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(),361,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(), 361)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if i#6 >= e#7 goto return,361,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el),343,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>,this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.jsonwrap.JzonElement el> = el,661,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363) => (<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>, this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.jsonwrap.JzonElement el> = el, 661))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>,val := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>,this.<foodev.jsondiff.JsonDiff$Leaf: foodev.jsondiff.jsonwrap.JzonElement val> = val,511,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343) => (<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>, this.<foodev.jsondiff.JsonDiff$Leaf: foodev.jsondiff.jsonwrap.JzonElement val> = val, 511))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el),343,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>,val := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>,this.<foodev.jsondiff.JsonDiff$Leaf: foodev.jsondiff.jsonwrap.JzonElement val> = val,511,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343) => (<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>, this.<foodev.jsondiff.JsonDiff$Leaf: foodev.jsondiff.jsonwrap.JzonElement val> = val, 511))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>,this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.jsonwrap.JzonElement el> = el,661,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363) => (<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>, this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.jsonwrap.JzonElement el> = el, 661)))]
Visited methods: 9
 Analysis results
----------------------------
 Number of conflicts: 41
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jsondiff/cd3cba0a2fcc4f07a4e04f0e729962c2bbd6b769/original-without-dependencies/jsondiff-1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,61800
Time to perform PDG 0,46700
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jsondiff/cd3cba0a2fcc4f07a4e04f0e729962c2bbd6b769/original-without-dependencies/jsondiff-1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,61200
Time to perform PDG 0,51900
CONFLICTS: [List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(),361,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(), 361)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if i#6 >= e#7 goto return,361,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if arrs == null goto $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),365,SinkNode, path: )), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(),361,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(), 361)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if i#6 >= e#7 goto return,361,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack13 = new foodev.jsondiff.JsonDiff$ArrNode,363,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,newParent#8 = $stack13,363,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, newParent#8 = $stack13, 363)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17),366,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,virtualinvoke arrs.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack18, newParent#8),366,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, virtualinvoke arrs.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack18, newParent#8), 366))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent, $stack37, leaves, arrs),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent, $stack37, leaves, arrs), 353))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent, $stack37, leaves, arrs),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent, $stack37, leaves, arrs), 353))), List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(),361,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(), 361)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if i#6 >= e#7 goto return,361,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i#6 = i#6 + 1,361,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)))]
 Analysis results
----------------------------
 Number of conflicts: 5
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
