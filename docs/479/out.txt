List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i#6 = i#6 + 1,361,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el,348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el, 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(),348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(), 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28),348,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el,348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el, 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(),348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(), 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28),348,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el,348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el, 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(),348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(), 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28),348,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(),348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(), 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28),348,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el,348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el, 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(),348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(), 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28),348,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack26 = <foodev.jsondiff.JsonDiff: java.util.Comparator ENTRY_COMPARATOR>,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26),347,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28),348,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack31 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack31 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if $stack31 == 0 goto (branch),350,SinkNode, path: ))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack31 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack31 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if $stack31 == 0 goto (branch),350,SinkNode, path: ))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el,348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el, 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(),348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(), 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28),348,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el,348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack27 = (foodev.jsondiff.jsonwrap.JzonObject) el, 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(),348,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack28 = interfaceinvoke $stack27.<foodev.jsondiff.jsonwrap.JzonObject: java.util.Collection entrySet()>(), 348)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28),348,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, interfaceinvoke memb.<java.util.Set: boolean addAll(java.util.Collection)>($stack28), 348)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack10 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(),345,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack10 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(), 345)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if $stack10 == 0 goto $stack11 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonArray()>(),345,SinkNode, path: ))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>,key := @parameter1: java.lang.String,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>,this.<foodev.jsondiff.JsonDiff$ObjNode: java.lang.String key> = key,630,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352) => (<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>, this.<foodev.jsondiff.JsonDiff$ObjNode: java.lang.String key> = key, 630)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el),343,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>,key := @parameter1: java.lang.String,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>,this.<foodev.jsondiff.JsonDiff$ObjNode: java.lang.String key> = key,630,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352) => (<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>, this.<foodev.jsondiff.JsonDiff$ObjNode: java.lang.String key> = key, 630)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>,this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.jsonwrap.JzonElement el> = el,661,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363) => (<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>, this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.jsonwrap.JzonElement el> = el, 661)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent#8, $stack14, leaves, arrs),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent#8, $stack14, leaves, arrs), 369)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack10 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(),345,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack10 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(), 345)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if $stack10 == 0 goto $stack11 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonArray()>(),345,SinkNode, path: ))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(),361,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(), 361)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if i#6 >= e#7 goto return,361,SinkNode, path: ))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent#8, $stack14, leaves, arrs),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent#8, $stack14, leaves, arrs), 369)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(),361,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(), 361)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if i#6 >= e#7 goto return,361,SinkNode, path: ))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent#8, $stack14, leaves, arrs),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent#8, $stack14, leaves, arrs), 369)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>,val := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>,this.<foodev.jsondiff.JsonDiff$Leaf: foodev.jsondiff.jsonwrap.JzonElement val> = val,511,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343) => (<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>, this.<foodev.jsondiff.JsonDiff$Leaf: foodev.jsondiff.jsonwrap.JzonElement val> = val, 511)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack11 + $stack10,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6),363,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack6 = i * 31,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack6 = i * 31, 669)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = $stack6 + $stack7,669,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack9 = i * 31,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack9 = i * 31, 671)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack11 = $stack9 + $stack8,671,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack11 = $stack9 + $stack8, 671)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack10 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(),345,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack10 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonObject()>(), 345)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if $stack10 == 0 goto $stack11 = interfaceinvoke el.<foodev.jsondiff.jsonwrap.JzonElement: boolean isJsonArray()>(),345,SinkNode, path: ))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(),361,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(), 361)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if i#6 >= e#7 goto return,361,SinkNode, path: ))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el),343,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>,this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.jsonwrap.JzonElement el> = el,661,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363) => (<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>, this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.jsonwrap.JzonElement el> = el, 661)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>,val := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>,this.<foodev.jsondiff.JsonDiff$Leaf: foodev.jsondiff.jsonwrap.JzonElement val> = val,511,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343) => (<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>, this.<foodev.jsondiff.JsonDiff$Leaf: foodev.jsondiff.jsonwrap.JzonElement val> = val, 511)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el),343,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack34 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>(), 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack35 = (java.lang.String) $stack34,352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack35 = (java.lang.String) $stack34, 352)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35),352,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack33.<foodev.jsondiff.JsonDiff$ObjNode: void <init>(foodev.jsondiff.JsonDiff$Node,java.lang.String)>(parent, $stack35), 352)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,$stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>,668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, $stack3 = this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.JsonDiff$Node parent>, 668)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>,i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed),668,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366) => (<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>, i = virtualinvoke $stack3.<foodev.jsondiff.JsonDiff$Node: int doHash(boolean)>(indexed), 668)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>,val := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>,this.<foodev.jsondiff.JsonDiff$Leaf: foodev.jsondiff.jsonwrap.JzonElement val> = val,511,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343) => (<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>, this.<foodev.jsondiff.JsonDiff$Leaf: foodev.jsondiff.jsonwrap.JzonElement val> = val, 511)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack25 = new java.util.TreeSet,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack25.<java.util.TreeSet: void <init>(java.util.Comparator)>($stack26), 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack8.<foodev.jsondiff.JsonDiff$Leaf: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement)>(parent, el), 343)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>,el := @parameter1: foodev.jsondiff.jsonwrap.JzonElement,-1,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>,this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.jsonwrap.JzonElement el> = el,661,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363) => (<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>, this.<foodev.jsondiff.JsonDiff$ArrNode: foodev.jsondiff.jsonwrap.JzonElement el> = el, 661)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(),361,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(), 361)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if i#6 >= e#7 goto return,361,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if arrs == null goto $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),365,SinkNode, path: ))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(),361,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(), 361)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if i#6 >= e#7 goto return,361,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack13 = new foodev.jsondiff.JsonDiff$ArrNode,363,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,newParent#8 = $stack13,363,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, newParent#8 = $stack13, 363)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1),366,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack17 = virtualinvoke newParent#8.<foodev.jsondiff.JsonDiff$ArrNode: int doHash(boolean)>(1), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17),366,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack17), 366)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,virtualinvoke arrs.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack18, newParent#8),366,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, virtualinvoke arrs.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack18, newParent#8), 366)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent, $stack37, leaves, arrs),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent, $stack37, leaves, arrs), 353)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb = $stack25,347,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb = $stack25, 347)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(),350,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, i = interfaceinvoke memb.<java.util.Set: java.util.Iterator iterator()>(), 350)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(),376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack32 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>(), 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e = (java.util.Map$Entry) $stack32,376,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e = (java.util.Map$Entry) $stack32, 376)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack36 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>(), 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36,353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack37 = (foodev.jsondiff.jsonwrap.JzonElement) $stack36, 353)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent, $stack37, leaves, arrs),353,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, staticinvoke <foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>(newParent, $stack37, leaves, arrs), 353)))

List(Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el,359,SourceNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, memb#5 = (foodev.jsondiff.jsonwrap.JzonArray) el, 359)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(),361,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, e#7 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: int size()>(), 361)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,if i#6 >= e#7 goto return,361,SimpleNode, path: ) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,i#6 = i#6 + 1,361,SimpleNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, specialinvoke $stack13.<foodev.jsondiff.JsonDiff$ArrNode: void <init>(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,int)>(parent, el, i#6), 363)) => Node(<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>,$stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6),369,SinkNode, path: (<foodev.jsondiff.JsonDiff: void findLeaves(foodev.jsondiff.JsonDiff$Node,foodev.jsondiff.jsonwrap.JzonElement,java.util.List,java.util.HashMap)>, $stack14 = interfaceinvoke memb#5.<foodev.jsondiff.jsonwrap.JzonArray: foodev.jsondiff.jsonwrap.JzonElement get(int)>(i#6), 369)))

