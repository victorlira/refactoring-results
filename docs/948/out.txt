List(Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack17 = this.<io.vertx.docgen.BaseProcessor: com.sun.source.util.DocTrees docTrees>,417,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack17 = this.<io.vertx.docgen.BaseProcessor: com.sun.source.util.DocTrees docTrees>, 417)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,resolvedTP = virtualinvoke $stack17.<com.sun.source.util.DocTrees: com.sun.source.util.TreePath getPath(javax.lang.model.element.Element)>(elt),417,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, resolvedTP = virtualinvoke $stack17.<com.sun.source.util.DocTrees: com.sun.source.util.TreePath getPath(javax.lang.model.element.Element)>(elt), 417)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack20 = virtualinvoke resolvedTP.<com.sun.source.util.TreePath: com.sun.source.tree.Tree getLeaf()>(),419,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack20 = virtualinvoke resolvedTP.<com.sun.source.util.TreePath: com.sun.source.tree.Tree getLeaf()>(), 419)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,methodTree = (com.sun.source.tree.MethodTree) $stack20,419,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, methodTree = (com.sun.source.tree.MethodTree) $stack20, 419)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,blockTree = interfaceinvoke methodTree.<com.sun.source.tree.MethodTree: com.sun.source.tree.BlockTree getBody()>(),420,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, blockTree = interfaceinvoke methodTree.<com.sun.source.tree.MethodTree: com.sun.source.tree.BlockTree getBody()>(), 420)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statements = interfaceinvoke blockTree.<com.sun.source.tree.BlockTree: java.util.List getStatements()>(),422,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statements = interfaceinvoke blockTree.<com.sun.source.tree.BlockTree: java.util.List getStatements()>(), 422)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment = interfaceinvoke statements.<java.util.List: java.util.Iterator iterator()>(),437,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment = interfaceinvoke statements.<java.util.List: java.util.Iterator iterator()>(), 437)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack54 = interfaceinvoke fragment.<java.util.Iterator: java.lang.Object next()>(),455,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack54 = interfaceinvoke fragment.<java.util.Iterator: java.lang.Object next()>(), 455)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statement = (com.sun.source.tree.StatementTree) $stack54,455,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statement = (com.sun.source.tree.StatementTree) $stack54, 455)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack57 = interfaceinvoke $stack56.<com.sun.source.util.DocSourcePositions: long getStartPosition(com.sun.source.tree.CompilationUnitTree,com.sun.source.tree.Tree)>(unit, statement),438,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack57 = interfaceinvoke $stack56.<com.sun.source.util.DocSourcePositions: long getStartPosition(com.sun.source.tree.CompilationUnitTree,com.sun.source.tree.Tree)>(unit, statement), 438)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart = (int) $stack57,438,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart = (int) $stack57, 438)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack64 = statementStart - lineStart,443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack64 = statementStart - lineStart, 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64),443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64), 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47),449,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47), 449)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart),450,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment#18 = $stack41,446,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment#18 = $stack41, 446)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack45 = virtualinvoke fragment#18.<java.lang.StringBuilder: java.lang.String toString()>(),456,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,lineStart = lineStart + -1,441,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack60 = lineStart - 1, 440)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack64 = statementStart - lineStart,443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack64 = statementStart - lineStart, 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64),443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64), 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47),449,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47), 449)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart),450,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment#18 = $stack41,446,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment#18 = $stack41, 446)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack45 = virtualinvoke fragment#18.<java.lang.StringBuilder: java.lang.String toString()>(),456,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,blockMargin = 2147483647,435,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64), 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47),449,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47), 449)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart),450,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment#18 = $stack41,446,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment#18 = $stack41, 446)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack45 = virtualinvoke fragment#18.<java.lang.StringBuilder: java.lang.String toString()>(),456,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,lineStart = statementStart,439,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, lineStart = statementStart, 439)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack64 = statementStart - lineStart,443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack64 = statementStart - lineStart, 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64),443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64), 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47),449,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47), 449)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart),450,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment#18 = $stack41,446,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment#18 = $stack41, 446)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack45 = virtualinvoke fragment#18.<java.lang.StringBuilder: java.lang.String toString()>(),456,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack54 = interfaceinvoke fragment.<java.util.Iterator: java.lang.Object next()>(),455,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack54 = interfaceinvoke fragment.<java.util.Iterator: java.lang.Object next()>(), 455)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statement = (com.sun.source.tree.StatementTree) $stack54,455,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statement = (com.sun.source.tree.StatementTree) $stack54, 455)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack57 = interfaceinvoke $stack56.<com.sun.source.util.DocSourcePositions: long getStartPosition(com.sun.source.tree.CompilationUnitTree,com.sun.source.tree.Tree)>(unit, statement),438,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack57 = interfaceinvoke $stack56.<com.sun.source.util.DocSourcePositions: long getStartPosition(com.sun.source.tree.CompilationUnitTree,com.sun.source.tree.Tree)>(unit, statement), 438)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart = (int) $stack57,438,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart = (int) $stack57, 438)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack64 = statementStart - lineStart,443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack64 = statementStart - lineStart, 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64),443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64), 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47),449,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47), 449)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart),450,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment#18 = $stack41,446,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment#18 = $stack41, 446)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack45 = virtualinvoke fragment#18.<java.lang.StringBuilder: java.lang.String toString()>(),456,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,unit = virtualinvoke resolvedTP.<com.sun.source.util.TreePath: com.sun.source.tree.CompilationUnitTree getCompilationUnit()>(),418,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, unit = virtualinvoke resolvedTP.<com.sun.source.util.TreePath: com.sun.source.tree.CompilationUnitTree getCompilationUnit()>(), 418)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack57 = interfaceinvoke $stack56.<com.sun.source.util.DocSourcePositions: long getStartPosition(com.sun.source.tree.CompilationUnitTree,com.sun.source.tree.Tree)>(unit, statement),438,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack57 = interfaceinvoke $stack56.<com.sun.source.util.DocSourcePositions: long getStartPosition(com.sun.source.tree.CompilationUnitTree,com.sun.source.tree.Tree)>(unit, statement), 438)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart = (int) $stack57,438,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart = (int) $stack57, 438)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack64 = statementStart - lineStart,443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack64 = statementStart - lineStart, 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64),443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64), 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47),449,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47), 449)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart),450,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment#18 = $stack41,446,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment#18 = $stack41, 446)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack45 = virtualinvoke fragment#18.<java.lang.StringBuilder: java.lang.String toString()>(),456,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47),449,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47), 449)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart),450,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment#18 = $stack41,446,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment#18 = $stack41, 446)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack45 = virtualinvoke fragment#18.<java.lang.StringBuilder: java.lang.String toString()>(),456,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statements = interfaceinvoke blockTree.<com.sun.source.tree.BlockTree: java.util.List getStatements()>(),422,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statements = interfaceinvoke blockTree.<com.sun.source.tree.BlockTree: java.util.List getStatements()>(), 422)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment = interfaceinvoke statements.<java.util.List: java.util.Iterator iterator()>(),437,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment = interfaceinvoke statements.<java.util.List: java.util.Iterator iterator()>(), 437)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack54 = interfaceinvoke fragment.<java.util.Iterator: java.lang.Object next()>(),455,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack54 = interfaceinvoke fragment.<java.util.Iterator: java.lang.Object next()>(), 455)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statement = (com.sun.source.tree.StatementTree) $stack54,455,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statement = (com.sun.source.tree.StatementTree) $stack54, 455)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack57 = interfaceinvoke $stack56.<com.sun.source.util.DocSourcePositions: long getStartPosition(com.sun.source.tree.CompilationUnitTree,com.sun.source.tree.Tree)>(unit, statement),438,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack57 = interfaceinvoke $stack56.<com.sun.source.util.DocSourcePositions: long getStartPosition(com.sun.source.tree.CompilationUnitTree,com.sun.source.tree.Tree)>(unit, statement), 438)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart = (int) $stack57,438,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart = (int) $stack57, 438)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack64 = statementStart - lineStart,443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack64 = statementStart - lineStart, 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64),443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64), 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47),449,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47), 449)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart),450,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment#18 = $stack41,446,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment#18 = $stack41, 446)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack45 = virtualinvoke fragment#18.<java.lang.StringBuilder: java.lang.String toString()>(),456,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack64 = statementStart - lineStart,443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack64 = statementStart - lineStart, 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64),443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64), 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47),449,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47), 449)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart),450,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment#18 = $stack41,446,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment#18 = $stack41, 446)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack45 = virtualinvoke fragment#18.<java.lang.StringBuilder: java.lang.String toString()>(),456,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,blockTree = interfaceinvoke methodTree.<com.sun.source.tree.MethodTree: com.sun.source.tree.BlockTree getBody()>(),420,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, blockTree = interfaceinvoke methodTree.<com.sun.source.tree.MethodTree: com.sun.source.tree.BlockTree getBody()>(), 420)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statements = interfaceinvoke blockTree.<com.sun.source.tree.BlockTree: java.util.List getStatements()>(),422,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statements = interfaceinvoke blockTree.<com.sun.source.tree.BlockTree: java.util.List getStatements()>(), 422)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment = interfaceinvoke statements.<java.util.List: java.util.Iterator iterator()>(),437,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment = interfaceinvoke statements.<java.util.List: java.util.Iterator iterator()>(), 437)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack54 = interfaceinvoke fragment.<java.util.Iterator: java.lang.Object next()>(),455,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack54 = interfaceinvoke fragment.<java.util.Iterator: java.lang.Object next()>(), 455)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statement = (com.sun.source.tree.StatementTree) $stack54,455,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statement = (com.sun.source.tree.StatementTree) $stack54, 455)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack57 = interfaceinvoke $stack56.<com.sun.source.util.DocSourcePositions: long getStartPosition(com.sun.source.tree.CompilationUnitTree,com.sun.source.tree.Tree)>(unit, statement),438,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack57 = interfaceinvoke $stack56.<com.sun.source.util.DocSourcePositions: long getStartPosition(com.sun.source.tree.CompilationUnitTree,com.sun.source.tree.Tree)>(unit, statement), 438)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart = (int) $stack57,438,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart = (int) $stack57, 438)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack64 = statementStart - lineStart,443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack64 = statementStart - lineStart, 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64),443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64), 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47),449,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47), 449)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart),450,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment#18 = $stack41,446,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment#18 = $stack41, 446)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack45 = virtualinvoke fragment#18.<java.lang.StringBuilder: java.lang.String toString()>(),456,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statement#19 = virtualinvoke $stack42.<java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>("\n"),447,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statement#19 = virtualinvoke $stack42.<java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>('\n'), 447)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack46 = interfaceinvoke statement#19.<java.util.Iterator: java.lang.Object next()>(),448,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack46 = interfaceinvoke statement#19.<java.util.Iterator: java.lang.Object next()>(), 448)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart#20 = (java.lang.String) $stack46,448,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = (java.lang.String) $stack46, 448)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart),450,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment#18 = $stack41,446,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment#18 = $stack41, 446)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack45 = virtualinvoke fragment#18.<java.lang.StringBuilder: java.lang.String toString()>(),456,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack41 = new java.lang.StringBuilder,446,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, specialinvoke $stack41.<java.lang.StringBuilder: void <init>()>(), 446)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment#18 = $stack41,446,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment#18 = $stack41, 446)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack45 = virtualinvoke fragment#18.<java.lang.StringBuilder: java.lang.String toString()>(),456,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack57 = interfaceinvoke $stack56.<com.sun.source.util.DocSourcePositions: long getStartPosition(com.sun.source.tree.CompilationUnitTree,com.sun.source.tree.Tree)>(unit, statement),438,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack57 = interfaceinvoke $stack56.<com.sun.source.util.DocSourcePositions: long getStartPosition(com.sun.source.tree.CompilationUnitTree,com.sun.source.tree.Tree)>(unit, statement), 438)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart = (int) $stack57,438,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart = (int) $stack57, 438)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack64 = statementStart - lineStart,443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack64 = statementStart - lineStart, 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64),443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64), 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47),449,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47), 449)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart),450,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment#18 = $stack41,446,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment#18 = $stack41, 446)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack45 = virtualinvoke fragment#18.<java.lang.StringBuilder: java.lang.String toString()>(),456,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,$stack88 = (javax.lang.model.element.ExecutableElement) resolvedElt,319,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, $stack88 = (javax.lang.model.element.ExecutableElement) resolvedElt, 319)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack89.<io.vertx.docgen.BaseProcessor: java.lang.String renderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack88, includedElt#3),319,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack89.<io.vertx.docgen.BaseProcessor: java.lang.String renderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack88, includedElt#3), 319)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart#20 = (java.lang.String) $stack46,448,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = (java.lang.String) $stack46, 448)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart),450,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment#18 = $stack41,446,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment#18 = $stack41, 446)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack45 = virtualinvoke fragment#18.<java.lang.StringBuilder: java.lang.String toString()>(),456,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,methodTree = (com.sun.source.tree.MethodTree) $stack20,419,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, methodTree = (com.sun.source.tree.MethodTree) $stack20, 419)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,blockTree = interfaceinvoke methodTree.<com.sun.source.tree.MethodTree: com.sun.source.tree.BlockTree getBody()>(),420,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, blockTree = interfaceinvoke methodTree.<com.sun.source.tree.MethodTree: com.sun.source.tree.BlockTree getBody()>(), 420)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statements = interfaceinvoke blockTree.<com.sun.source.tree.BlockTree: java.util.List getStatements()>(),422,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statements = interfaceinvoke blockTree.<com.sun.source.tree.BlockTree: java.util.List getStatements()>(), 422)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment = interfaceinvoke statements.<java.util.List: java.util.Iterator iterator()>(),437,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment = interfaceinvoke statements.<java.util.List: java.util.Iterator iterator()>(), 437)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack54 = interfaceinvoke fragment.<java.util.Iterator: java.lang.Object next()>(),455,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack54 = interfaceinvoke fragment.<java.util.Iterator: java.lang.Object next()>(), 455)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statement = (com.sun.source.tree.StatementTree) $stack54,455,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statement = (com.sun.source.tree.StatementTree) $stack54, 455)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack57 = interfaceinvoke $stack56.<com.sun.source.util.DocSourcePositions: long getStartPosition(com.sun.source.tree.CompilationUnitTree,com.sun.source.tree.Tree)>(unit, statement),438,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack57 = interfaceinvoke $stack56.<com.sun.source.util.DocSourcePositions: long getStartPosition(com.sun.source.tree.CompilationUnitTree,com.sun.source.tree.Tree)>(unit, statement), 438)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart = (int) $stack57,438,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart = (int) $stack57, 438)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack64 = statementStart - lineStart,443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack64 = statementStart - lineStart, 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64),443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64), 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47),449,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47), 449)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart),450,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment#18 = $stack41,446,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment#18 = $stack41, 446)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack45 = virtualinvoke fragment#18.<java.lang.StringBuilder: java.lang.String toString()>(),456,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack45 = virtualinvoke fragment#18.<java.lang.StringBuilder: java.lang.String toString()>(),456,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart),450,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment#18 = $stack41,446,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment#18 = $stack41, 446)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack45 = virtualinvoke fragment#18.<java.lang.StringBuilder: java.lang.String toString()>(),456,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

List(Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment = interfaceinvoke statements.<java.util.List: java.util.Iterator iterator()>(),437,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment = interfaceinvoke statements.<java.util.List: java.util.Iterator iterator()>(), 437)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack54 = interfaceinvoke fragment.<java.util.Iterator: java.lang.Object next()>(),455,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack54 = interfaceinvoke fragment.<java.util.Iterator: java.lang.Object next()>(), 455)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statement = (com.sun.source.tree.StatementTree) $stack54,455,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statement = (com.sun.source.tree.StatementTree) $stack54, 455)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack57 = interfaceinvoke $stack56.<com.sun.source.util.DocSourcePositions: long getStartPosition(com.sun.source.tree.CompilationUnitTree,com.sun.source.tree.Tree)>(unit, statement),438,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack57 = interfaceinvoke $stack56.<com.sun.source.util.DocSourcePositions: long getStartPosition(com.sun.source.tree.CompilationUnitTree,com.sun.source.tree.Tree)>(unit, statement), 438)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart = (int) $stack57,438,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart = (int) $stack57, 438)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack64 = statementStart - lineStart,443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, $stack64 = statementStart - lineStart, 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64),443,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, blockMargin = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack64), 443)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47),449,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, lineStart = staticinvoke <java.lang.Math: int min(int,int)>(blockMargin, $stack47), 449)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart),450,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, statementStart#20 = virtualinvoke statementStart#20.<java.lang.String: java.lang.String substring(int)>(lineStart), 450)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,fragment#18 = $stack41,446,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322) => (<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>, fragment#18 = $stack41, 446)) => Node(<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>,$stack45 = virtualinvoke fragment#18.<java.lang.StringBuilder: java.lang.String toString()>(),456,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>,link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3),322,SourceNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, link = virtualinvoke $stack81.<io.vertx.docgen.BaseProcessor: java.lang.String defaultRenderSource(javax.lang.model.element.ExecutableElement,java.lang.String)>($stack80, includedElt#3), 322)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,csq := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307)) => Node(<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>,$stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq),82,SinkNode, path: (<io.vertx.docgen.BaseProcessor$2: java.lang.Void visitLink(com.sun.source.doctree.LinkTree,java.lang.Void)>, virtualinvoke $stack102.<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>(link), 307) => (<io.vertx.docgen.DocWriter: io.vertx.docgen.DocWriter append(java.lang.CharSequence)>, $stack3 = specialinvoke this.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(csq), 82)))

